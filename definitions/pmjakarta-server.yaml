paths:
  '/Members/{id}/accessTokens/{fk}':
    get:
      tags:
        - Members
      summary: Find a related item by id for accessTokens.
      operationId: Members.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Delete a related item by id for accessTokens.
      operationId: Members.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Members
      summary: Update a related item by id for accessTokens.
      operationId: Members.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Members/{id}/memberImage/{fk}':
    get:
      tags:
        - Members
      summary: Find a related item by id for memberImage.
      operationId: Members.prototype.__findById__memberImage
      parameters:
        - name: fk
          in: path
          description: Foreign key for memberImage
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Delete a related item by id for memberImage.
      operationId: Members.prototype.__destroyById__memberImage
      parameters:
        - name: fk
          in: path
          description: Foreign key for memberImage
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Members
      summary: Update a related item by id for memberImage.
      operationId: Members.prototype.__updateById__memberImage
      parameters:
        - name: fk
          in: path
          description: Foreign key for memberImage
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberImage'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  '/Members/{id}/nearbies':
    get:
      tags:
        - Members
      summary: Fetches hasOne relation nearbies.
      operationId: Members.prototype.__get__nearbies
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in nearbies of this model.
      operationId: Members.prototype.__create__nearbies
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Nearby'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    put:
      tags:
        - Members
      summary: Update nearbies of this model.
      operationId: Members.prototype.__update__nearbies
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Nearby'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes nearbies of this model.
      operationId: Members.prototype.__destroy__nearbies
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/memberPhotos':
    get:
      tags:
        - Members
      summary: Fetches hasOne relation memberPhotos.
      operationId: Members.prototype.__get__memberPhotos
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in memberPhotos of this model.
      operationId: Members.prototype.__create__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - Members
      summary: Update memberPhotos of this model.
      operationId: Members.prototype.__update__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes memberPhotos of this model.
      operationId: Members.prototype.__destroy__memberPhotos
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/settingHome':
    get:
      tags:
        - Members
      summary: Fetches hasOne relation settingHome.
      operationId: Members.prototype.__get__settingHome
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in settingHome of this model.
      operationId: Members.prototype.__create__settingHome
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    put:
      tags:
        - Members
      summary: Update settingHome of this model.
      operationId: Members.prototype.__update__settingHome
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes settingHome of this model.
      operationId: Members.prototype.__destroy__settingHome
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/settingHomes':
    get:
      tags:
        - Members
      summary: Fetches hasOne relation settingHomes.
      operationId: Members.prototype.__get__settingHomes
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in settingHomes of this model.
      operationId: Members.prototype.__create__settingHomes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    put:
      tags:
        - Members
      summary: Update settingHomes of this model.
      operationId: Members.prototype.__update__settingHomes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes settingHomes of this model.
      operationId: Members.prototype.__destroy__settingHomes
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/rel_visibility/{fk}':
    get:
      tags:
        - Members
      summary: Find a related item by id for rel_visibility.
      operationId: Members.prototype.__findById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Delete a related item by id for rel_visibility.
      operationId: Members.prototype.__destroyById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Members
      summary: Update a related item by id for rel_visibility.
      operationId: Members.prototype.__updateById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/Members/{id}/chatDetails/{fk}':
    get:
      tags:
        - Members
      summary: Find a related item by id for chatDetails.
      operationId: Members.prototype.__findById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Delete a related item by id for chatDetails.
      operationId: Members.prototype.__destroyById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Members
      summary: Update a related item by id for chatDetails.
      operationId: Members.prototype.__updateById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  '/Members/{id}/accessTokens':
    get:
      tags:
        - Members
      summary: Queries accessTokens of Members.
      operationId: Members.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in accessTokens of this model.
      operationId: Members.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes all accessTokens of this model.
      operationId: Members.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/accessTokens/count':
    get:
      tags:
        - Members
      summary: Counts accessTokens of Members.
      operationId: Members.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Members/{id}/memberImage':
    get:
      tags:
        - Members
      summary: Queries memberImage of Members.
      operationId: Members.prototype.__get__memberImage
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberImage'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in memberImage of this model.
      operationId: Members.prototype.__create__memberImage
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberImage'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes all memberImage of this model.
      operationId: Members.prototype.__delete__memberImage
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/memberImage/count':
    get:
      tags:
        - Members
      summary: Counts memberImage of Members.
      operationId: Members.prototype.__count__memberImage
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Members/{id}/rel_visibility':
    get:
      tags:
        - Members
      summary: Queries rel_visibility of Members.
      operationId: Members.prototype.__get__rel_visibility
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VisibilityData'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in rel_visibility of this model.
      operationId: Members.prototype.__create__rel_visibility
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes all rel_visibility of this model.
      operationId: Members.prototype.__delete__rel_visibility
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/rel_visibility/count':
    get:
      tags:
        - Members
      summary: Counts rel_visibility of Members.
      operationId: Members.prototype.__count__rel_visibility
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Members/{id}/chatDetails':
    get:
      tags:
        - Members
      summary: Queries chatDetails of Members.
      operationId: Members.prototype.__get__chatDetails
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatDetail'
      deprecated: false
    post:
      tags:
        - Members
      summary: Creates a new instance in chatDetails of this model.
      operationId: Members.prototype.__create__chatDetails
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - Members
      summary: Deletes all chatDetails of this model.
      operationId: Members.prototype.__delete__chatDetails
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/chatDetails/count':
    get:
      tags:
        - Members
      summary: Counts chatDetails of Members.
      operationId: Members.prototype.__count__chatDetails
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members:
    post:
      tags:
        - Members
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Members.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    patch:
      tags:
        - Members
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Members.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - Members
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Members.replaceOrCreate__put_Members
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    get:
      tags:
        - Members
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Members.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Members'
      deprecated: false
  /Members/replaceOrCreate:
    post:
      tags:
        - Members
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Members.replaceOrCreate__post_Members_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /Members/upsertWithWhere:
    post:
      tags:
        - Members
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Members.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/Members/{id}/exists':
    get:
      tags:
        - Members
      summary: Check whether a model instance exists in the data source.
      operationId: 'Members.exists__get_Members_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Members/{id}':
    head:
      tags:
        - Members
      summary: Check whether a model instance exists in the data source.
      operationId: 'Members.exists__head_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Members
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Members.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - Members
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Members.replaceById__put_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - Members
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Members.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Members
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Members.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/Members/{id}/replace':
    post:
      tags:
        - Members
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Members.replaceById__post_Members_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /Members/findOne:
    get:
      tags:
        - Members
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Members.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /Members/update:
    post:
      tags:
        - Members
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Members.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Members'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Members/count:
    get:
      tags:
        - Members
      summary: Count instances of the model matched by where from the data source.
      operationId: Members.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members/login:
    post:
      tags:
        - Members
      summary: Login a user with username/email and password.
      operationId: Members.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Members/logout:
    post:
      tags:
        - Members
      summary: Logout a user with access token.
      operationId: Members.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/verify':
    post:
      tags:
        - Members
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: Members.prototype.verify
      parameters:
        - name: id
          in: path
          description: Members id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/confirm:
    get:
      tags:
        - Members
      summary: Confirm a user registration with identity verification token.
      operationId: Members.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset:
    post:
      tags:
        - Members
      summary: Reset password for a user with email.
      operationId: Members.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/change-password:
    post:
      tags:
        - Members
      summary: "Change a user's password."
      operationId: Members.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset-password:
    post:
      tags:
        - Members
      summary: "Reset user's password via a password-reset token."
      operationId: Members.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/updateById':
    post:
      tags:
        - Members
      operationId: Members.updateById
      parameters:
        - name: id
          in: path
          required: false
          type: number
          format: double
        - name: param
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/newLogin:
    post:
      tags:
        - Members
      operationId: Members.newLogin
      parameters:
        - name: email
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Members/{id}/onlineOffline':
    post:
      tags:
        - Members
      operationId: Members.onlineOffline
      parameters:
        - name: id
          in: path
          required: false
          type: number
          format: double
        - name: param
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/statistic:
    get:
      tags:
        - Members
      operationId: Members.statistic
      parameters:
        - name: params
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/register:
    post:
      tags:
        - Members
      operationId: Members.register
      parameters:
        - name: params
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/isSocialRegistered:
    post:
      tags:
        - Members
      operationId: Members.isSocialRegistered
      parameters:
        - name: socialId
          in: formData
          required: true
          type: string
        - name: loginWith
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: boolean
      deprecated: false
  /Members/passwordReset:
    post:
      tags:
        - Members
      operationId: Members.passwordReset
      parameters:
        - name: param
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/emailCheck:
    post:
      tags:
        - Members
      operationId: Members.emailCheck
      parameters:
        - name: param
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/isUserNeedProfile:
    post:
      tags:
        - Members
      summary: Check User need fill profile or not.
      operationId: Members.isUserNeedProfile
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                description: result is true or false
                type: boolean
      deprecated: false
  /Members/updateProfile:
    post:
      tags:
        - Members
      summary: Update Profile
      operationId: Members.updateProfile
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
        - name: params
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: new Member data
            type: object
      deprecated: false
  /Members/deleteAccout:
    get:
      tags:
        - Members
      summary: Delete Account
      operationId: Members.deleteAccount
      parameters:
        - name: userId
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/generateAlias:
    get:
      tags:
        - Members
      operationId: Members.generateAlias
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/adminLogin:
    post:
      tags:
        - Members
      operationId: Members.adminLogin
      parameters:
        - name: email
          in: formData
          required: true
          type: string
        - name: password
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/getMemberList:
    get:
      tags:
        - Members
      operationId: Members.getMemberList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/getUserData:
    get:
      tags:
        - Members
      operationId: Members.getUserData
      parameters:
        - name: updateDate
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/search:
    post:
      tags:
        - Members
      operationId: Members.search
      parameters:
        - name: search
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/getDetailMember:
    post:
      tags:
        - Members
      operationId: Members.getDetailMember
      parameters:
        - name: params
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/updateMember:
    post:
      tags:
        - Members
      operationId: Members.updateMember
      parameters:
        - name: params
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Members/getPendingEmail:
    get:
      tags:
        - Members
      operationId: Members.getPendingEmail
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Members/adminApproveEmail/{id}':
    get:
      tags:
        - Members
      operationId: Members.adminApproveEmail
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/DislikeLists/{id}/memberDisLike':
    get:
      tags:
        - DislikeList
      summary: Fetches belongsTo relation memberDisLike.
      operationId: DislikeList.prototype.__get__memberDisLike
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: DislikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /DislikeLists:
    post:
      tags:
        - DislikeList
      summary: Create a new instance of the model and persist it into the data source.
      operationId: DislikeList.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
    patch:
      tags:
        - DislikeList
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: DislikeList.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
    put:
      tags:
        - DislikeList
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: DislikeList.replaceOrCreate__put_DislikeLists
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
    get:
      tags:
        - DislikeList
      summary: Find all instances of the model matched by filter from the data source.
      operationId: DislikeList.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/DislikeList'
      deprecated: false
  /DislikeLists/replaceOrCreate:
    post:
      tags:
        - DislikeList
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: DislikeList.replaceOrCreate__post_DislikeLists_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
  /DislikeLists/upsertWithWhere:
    post:
      tags:
        - DislikeList
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: DislikeList.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
  '/DislikeLists/{id}/exists':
    get:
      tags:
        - DislikeList
      summary: Check whether a model instance exists in the data source.
      operationId: 'DislikeList.exists__get_DislikeLists_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/DislikeLists/{id}':
    head:
      tags:
        - DislikeList
      summary: Check whether a model instance exists in the data source.
      operationId: 'DislikeList.exists__head_DislikeLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - DislikeList
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: DislikeList.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
    put:
      tags:
        - DislikeList
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'DislikeList.replaceById__put_DislikeLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
    delete:
      tags:
        - DislikeList
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: DislikeList.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - DislikeList
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: DislikeList.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/DislikeList'
        - name: id
          in: path
          description: DislikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
  '/DislikeLists/{id}/replace':
    post:
      tags:
        - DislikeList
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'DislikeList.replaceById__post_DislikeLists_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
  /DislikeLists/findOne:
    get:
      tags:
        - DislikeList
      summary: Find first instance of the model matched by filter from the data source.
      operationId: DislikeList.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DislikeList'
      deprecated: false
  /DislikeLists/update:
    post:
      tags:
        - DislikeList
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: DislikeList.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/DislikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /DislikeLists/count:
    get:
      tags:
        - DislikeList
      summary: Count instances of the model matched by where from the data source.
      operationId: DislikeList.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /DislikeLists/doDislike:
    post:
      tags:
        - DislikeList
      summary: Add to Dislike List
      operationId: DislikeList.doDislike
      parameters:
        - name: userId
          in: formData
          description: 'Id of user, who current user like'
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  /DislikeLists/doDislikeList:
    post:
      tags:
        - DislikeList
      summary: View to Dislike List
      operationId: DislikeList.doDislikeList
      parameters:
        - name: limit
          in: formData
          required: true
          type: number
          format: double
        - name: offset
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/LikeLists/{id}/membersLike':
    get:
      tags:
        - LikeList
      summary: Fetches belongsTo relation membersLike.
      operationId: LikeList.prototype.__get__membersLike
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: LikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/LikeLists/{id}/userLike':
    get:
      tags:
        - LikeList
      summary: Fetches belongsTo relation userLike.
      operationId: LikeList.prototype.__get__userLike
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: LikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/LikeLists/{id}/members':
    get:
      tags:
        - LikeList
      summary: Fetches belongsTo relation members.
      operationId: LikeList.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: LikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/LikeLists/{id}/members2':
    get:
      tags:
        - LikeList
      summary: Fetches belongsTo relation members2.
      operationId: LikeList.prototype.__get__members2
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: LikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /LikeLists:
    post:
      tags:
        - LikeList
      summary: Create a new instance of the model and persist it into the data source.
      operationId: LikeList.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
    patch:
      tags:
        - LikeList
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LikeList.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
    put:
      tags:
        - LikeList
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LikeList.replaceOrCreate__put_LikeLists
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
    get:
      tags:
        - LikeList
      summary: Find all instances of the model matched by filter from the data source.
      operationId: LikeList.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/LikeList'
      deprecated: false
  /LikeLists/replaceOrCreate:
    post:
      tags:
        - LikeList
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LikeList.replaceOrCreate__post_LikeLists_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
  /LikeLists/upsertWithWhere:
    post:
      tags:
        - LikeList
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: LikeList.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
  '/LikeLists/{id}/exists':
    get:
      tags:
        - LikeList
      summary: Check whether a model instance exists in the data source.
      operationId: 'LikeList.exists__get_LikeLists_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/LikeLists/{id}':
    head:
      tags:
        - LikeList
      summary: Check whether a model instance exists in the data source.
      operationId: 'LikeList.exists__head_LikeLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - LikeList
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: LikeList.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
    put:
      tags:
        - LikeList
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'LikeList.replaceById__put_LikeLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
    delete:
      tags:
        - LikeList
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: LikeList.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - LikeList
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: LikeList.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LikeList'
        - name: id
          in: path
          description: LikeList id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
  '/LikeLists/{id}/replace':
    post:
      tags:
        - LikeList
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'LikeList.replaceById__post_LikeLists_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
  /LikeLists/findOne:
    get:
      tags:
        - LikeList
      summary: Find first instance of the model matched by filter from the data source.
      operationId: LikeList.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeList'
      deprecated: false
  /LikeLists/update:
    post:
      tags:
        - LikeList
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: LikeList.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LikeList'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /LikeLists/count:
    get:
      tags:
        - LikeList
      summary: Count instances of the model matched by where from the data source.
      operationId: LikeList.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /LikeLists/doLike:
    post:
      tags:
        - LikeList
      summary: Add to Like List then check is user match with someone.
      operationId: LikeList.doLike
      parameters:
        - name: userId
          in: formData
          description: 'Id of user, who current user like'
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              isMatch:
                type: boolean
              matchMember:
                type: object
      deprecated: false
  /LikeLists/getLikeMeList:
    get:
      tags:
        - LikeList
      summary: Get like me list
      operationId: LikeList.getLikeMeList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /LikeLists/getILikeList:
    get:
      tags:
        - LikeList
      summary: Get I Like list
      operationId: LikeList.getILikeList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /containers:
    get:
      tags:
        - container
      operationId: container.getContainers
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
    post:
      tags:
        - container
      operationId: container.createContainer
      parameters:
        - name: options
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/containers/{container}':
    delete:
      tags:
        - container
      operationId: container.destroyContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
    get:
      tags:
        - container
      operationId: container.getContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/containers/{container}/files':
    get:
      tags:
        - container
      operationId: container.getFiles
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/containers/{container}/files/{file}':
    get:
      tags:
        - container
      operationId: container.getFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    delete:
      tags:
        - container
      operationId: container.removeFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
  '/containers/{container}/upload':
    post:
      tags:
        - container
      operationId: container.upload
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/containers/{container}/download/{file}':
    get:
      tags:
        - container
      operationId: container.download
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MemberImages/{id}/members':
    get:
      tags:
        - MemberImage
      summary: Fetches belongsTo relation members.
      operationId: MemberImage.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MemberImage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /MemberImages:
    post:
      tags:
        - MemberImage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MemberImage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    patch:
      tags:
        - MemberImage
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MemberImage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    put:
      tags:
        - MemberImage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberImage.replaceOrCreate__put_MemberImages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    get:
      tags:
        - MemberImage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MemberImage.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberImage'
      deprecated: false
  /MemberImages/replaceOrCreate:
    post:
      tags:
        - MemberImage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberImage.replaceOrCreate__post_MemberImages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  /MemberImages/upsertWithWhere:
    post:
      tags:
        - MemberImage
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MemberImage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  '/MemberImages/{id}/exists':
    get:
      tags:
        - MemberImage
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberImage.exists__get_MemberImages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MemberImages/{id}':
    head:
      tags:
        - MemberImage
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberImage.exists__head_MemberImages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MemberImage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MemberImage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    put:
      tags:
        - MemberImage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberImage.replaceById__put_MemberImages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    delete:
      tags:
        - MemberImage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MemberImage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MemberImage
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MemberImage.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberImage'
        - name: id
          in: path
          description: MemberImage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  '/MemberImages/{id}/replace':
    post:
      tags:
        - MemberImage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberImage.replaceById__post_MemberImages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  /MemberImages/findOne:
    get:
      tags:
        - MemberImage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MemberImage.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  /MemberImages/update:
    post:
      tags:
        - MemberImage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MemberImage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberImage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MemberImages/count:
    get:
      tags:
        - MemberImage
      summary: Count instances of the model matched by where from the data source.
      operationId: MemberImage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MemberSettings/{id}/members':
    get:
      tags:
        - MemberSetting
      summary: Fetches belongsTo relation members.
      operationId: MemberSetting.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MemberSetting id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /MemberSettings:
    post:
      tags:
        - MemberSetting
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MemberSetting.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
    patch:
      tags:
        - MemberSetting
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MemberSetting.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
    put:
      tags:
        - MemberSetting
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberSetting.replaceOrCreate__put_MemberSettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
    get:
      tags:
        - MemberSetting
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MemberSetting.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberSetting'
      deprecated: false
  /MemberSettings/replaceOrCreate:
    post:
      tags:
        - MemberSetting
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberSetting.replaceOrCreate__post_MemberSettings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
  /MemberSettings/upsertWithWhere:
    post:
      tags:
        - MemberSetting
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MemberSetting.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
  '/MemberSettings/{id}/exists':
    get:
      tags:
        - MemberSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberSetting.exists__get_MemberSettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MemberSettings/{id}':
    head:
      tags:
        - MemberSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberSetting.exists__head_MemberSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MemberSetting
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MemberSetting.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
    put:
      tags:
        - MemberSetting
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberSetting.replaceById__put_MemberSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
    delete:
      tags:
        - MemberSetting
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MemberSetting.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MemberSetting
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MemberSetting.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberSetting'
        - name: id
          in: path
          description: MemberSetting id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
  '/MemberSettings/{id}/replace':
    post:
      tags:
        - MemberSetting
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberSetting.replaceById__post_MemberSettings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
  /MemberSettings/findOne:
    get:
      tags:
        - MemberSetting
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MemberSetting.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberSetting'
      deprecated: false
  /MemberSettings/update:
    post:
      tags:
        - MemberSetting
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MemberSetting.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MemberSettings/count:
    get:
      tags:
        - MemberSetting
      summary: Count instances of the model matched by where from the data source.
      operationId: MemberSetting.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Nearbies/{id}/members':
    get:
      tags:
        - Nearby
      summary: Fetches belongsTo relation members.
      operationId: Nearby.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Nearby id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /Nearbies:
    post:
      tags:
        - Nearby
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Nearby.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    patch:
      tags:
        - Nearby
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Nearby.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    put:
      tags:
        - Nearby
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Nearby.replaceOrCreate__put_Nearbies
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    get:
      tags:
        - Nearby
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Nearby.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Nearby'
      deprecated: false
  /Nearbies/replaceOrCreate:
    post:
      tags:
        - Nearby
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Nearby.replaceOrCreate__post_Nearbies_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
  /Nearbies/upsertWithWhere:
    post:
      tags:
        - Nearby
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Nearby.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
  '/Nearbies/{id}/exists':
    get:
      tags:
        - Nearby
      summary: Check whether a model instance exists in the data source.
      operationId: 'Nearby.exists__get_Nearbies_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Nearbies/{id}':
    head:
      tags:
        - Nearby
      summary: Check whether a model instance exists in the data source.
      operationId: 'Nearby.exists__head_Nearbies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Nearby
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Nearby.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    put:
      tags:
        - Nearby
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Nearby.replaceById__put_Nearbies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    delete:
      tags:
        - Nearby
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Nearby.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Nearby
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Nearby.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Nearby'
        - name: id
          in: path
          description: Nearby id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
  '/Nearbies/{id}/replace':
    post:
      tags:
        - Nearby
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Nearby.replaceById__post_Nearbies_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
  /Nearbies/findOne:
    get:
      tags:
        - Nearby
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Nearby.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
  /Nearbies/update:
    post:
      tags:
        - Nearby
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Nearby.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Nearby'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Nearbies/count:
    get:
      tags:
        - Nearby
      summary: Count instances of the model matched by where from the data source.
      operationId: Nearby.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Chats:
    post:
      tags:
        - Chat
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Chat.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
    patch:
      tags:
        - Chat
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Chat.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
    put:
      tags:
        - Chat
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Chat.replaceOrCreate__put_Chats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
    get:
      tags:
        - Chat
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Chat.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Chat'
      deprecated: false
  /Chats/replaceOrCreate:
    post:
      tags:
        - Chat
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Chat.replaceOrCreate__post_Chats_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
  /Chats/upsertWithWhere:
    post:
      tags:
        - Chat
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Chat.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
  '/Chats/{id}/exists':
    get:
      tags:
        - Chat
      summary: Check whether a model instance exists in the data source.
      operationId: 'Chat.exists__get_Chats_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Chats/{id}':
    head:
      tags:
        - Chat
      summary: Check whether a model instance exists in the data source.
      operationId: 'Chat.exists__head_Chats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Chat
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Chat.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
    put:
      tags:
        - Chat
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Chat.replaceById__put_Chats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
    delete:
      tags:
        - Chat
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Chat.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Chat
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Chat.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chat'
        - name: id
          in: path
          description: Chat id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
  '/Chats/{id}/replace':
    post:
      tags:
        - Chat
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Chat.replaceById__post_Chats_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
  /Chats/findOne:
    get:
      tags:
        - Chat
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Chat.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
      deprecated: false
  /Chats/update:
    post:
      tags:
        - Chat
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Chat.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chat'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Chats/count:
    get:
      tags:
        - Chat
      summary: Count instances of the model matched by where from the data source.
      operationId: Chat.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Chats/getChatRoomList:
    get:
      tags:
        - Chat
      operationId: Chat.getChatRoomList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Chats/chatFromHome:
    get:
      tags:
        - Chat
      operationId: Chat.chatFromHome
      parameters:
        - name: likeMember
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/NearbyViews/{id}/members':
    get:
      tags:
        - NearbyView
      summary: Fetches belongsTo relation members.
      operationId: NearbyView.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/NearbyViews/{id}/rel_visibility/{fk}':
    get:
      tags:
        - NearbyView
      summary: Find a related item by id for rel_visibility.
      operationId: NearbyView.prototype.__findById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - NearbyView
      summary: Delete a related item by id for rel_visibility.
      operationId: NearbyView.prototype.__destroyById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - NearbyView
      summary: Update a related item by id for rel_visibility.
      operationId: NearbyView.prototype.__updateById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/NearbyViews/{id}/rel_visibility':
    get:
      tags:
        - NearbyView
      summary: Queries rel_visibility of NearbyView.
      operationId: NearbyView.prototype.__get__rel_visibility
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VisibilityData'
      deprecated: false
    post:
      tags:
        - NearbyView
      summary: Creates a new instance in rel_visibility of this model.
      operationId: NearbyView.prototype.__create__rel_visibility
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - NearbyView
      summary: Deletes all rel_visibility of this model.
      operationId: NearbyView.prototype.__delete__rel_visibility
      parameters:
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/NearbyViews/{id}/rel_visibility/count':
    get:
      tags:
        - NearbyView
      summary: Counts rel_visibility of NearbyView.
      operationId: NearbyView.prototype.__count__rel_visibility
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /NearbyViews:
    post:
      tags:
        - NearbyView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: NearbyView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
    patch:
      tags:
        - NearbyView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: NearbyView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
    put:
      tags:
        - NearbyView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: NearbyView.replaceOrCreate__put_NearbyViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
    get:
      tags:
        - NearbyView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: NearbyView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/NearbyView'
      deprecated: false
  /NearbyViews/replaceOrCreate:
    post:
      tags:
        - NearbyView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: NearbyView.replaceOrCreate__post_NearbyViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
  /NearbyViews/upsertWithWhere:
    post:
      tags:
        - NearbyView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: NearbyView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
  '/NearbyViews/{id}/exists':
    get:
      tags:
        - NearbyView
      summary: Check whether a model instance exists in the data source.
      operationId: 'NearbyView.exists__get_NearbyViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/NearbyViews/{id}':
    head:
      tags:
        - NearbyView
      summary: Check whether a model instance exists in the data source.
      operationId: 'NearbyView.exists__head_NearbyViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - NearbyView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: NearbyView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
    put:
      tags:
        - NearbyView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'NearbyView.replaceById__put_NearbyViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
    delete:
      tags:
        - NearbyView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: NearbyView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - NearbyView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: NearbyView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NearbyView'
        - name: id
          in: path
          description: NearbyView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
  '/NearbyViews/{id}/replace':
    post:
      tags:
        - NearbyView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'NearbyView.replaceById__post_NearbyViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
  /NearbyViews/findOne:
    get:
      tags:
        - NearbyView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: NearbyView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NearbyView'
      deprecated: false
  /NearbyViews/update:
    post:
      tags:
        - NearbyView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: NearbyView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NearbyView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /NearbyViews/count:
    get:
      tags:
        - NearbyView
      summary: Count instances of the model matched by where from the data source.
      operationId: NearbyView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/NearbyViews/{id}/getNearbyLocation':
    get:
      tags:
        - NearbyView
      summary: Get Nearby Member List of User
      operationId: NearbyView.getNearbyLocation
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ViewChats:
    post:
      tags:
        - ViewChat
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ViewChat.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
    patch:
      tags:
        - ViewChat
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ViewChat.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
    put:
      tags:
        - ViewChat
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewChat.replaceOrCreate__put_ViewChats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
    get:
      tags:
        - ViewChat
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ViewChat.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ViewChat'
      deprecated: false
  /ViewChats/replaceOrCreate:
    post:
      tags:
        - ViewChat
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewChat.replaceOrCreate__post_ViewChats_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
  /ViewChats/upsertWithWhere:
    post:
      tags:
        - ViewChat
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ViewChat.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
  '/ViewChats/{id}/exists':
    get:
      tags:
        - ViewChat
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewChat.exists__get_ViewChats_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ViewChats/{id}':
    head:
      tags:
        - ViewChat
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewChat.exists__head_ViewChats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ViewChat
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ViewChat.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
    put:
      tags:
        - ViewChat
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewChat.replaceById__put_ViewChats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
    delete:
      tags:
        - ViewChat
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ViewChat.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ViewChat
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ViewChat.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewChat'
        - name: id
          in: path
          description: ViewChat id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
  '/ViewChats/{id}/replace':
    post:
      tags:
        - ViewChat
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewChat.replaceById__post_ViewChats_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
  /ViewChats/findOne:
    get:
      tags:
        - ViewChat
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ViewChat.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewChat'
      deprecated: false
  /ViewChats/update:
    post:
      tags:
        - ViewChat
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ViewChat.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewChat'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ViewChats/count:
    get:
      tags:
        - ViewChat
      summary: Count instances of the model matched by where from the data source.
      operationId: ViewChat.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MemberPhotos/{id}/members':
    get:
      tags:
        - MemberPhoto
      summary: Fetches belongsTo relation members.
      operationId: MemberPhoto.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MemberPhoto id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /MemberPhotos:
    post:
      tags:
        - MemberPhoto
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MemberPhoto.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    patch:
      tags:
        - MemberPhoto
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MemberPhoto.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - MemberPhoto
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberPhoto.replaceOrCreate__put_MemberPhotos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    get:
      tags:
        - MemberPhoto
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MemberPhoto.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberPhoto'
      deprecated: false
  /MemberPhotos/replaceOrCreate:
    post:
      tags:
        - MemberPhoto
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberPhoto.replaceOrCreate__post_MemberPhotos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
  /MemberPhotos/upsertWithWhere:
    post:
      tags:
        - MemberPhoto
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MemberPhoto.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
  '/MemberPhotos/{id}/exists':
    get:
      tags:
        - MemberPhoto
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberPhoto.exists__get_MemberPhotos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MemberPhotos/{id}':
    head:
      tags:
        - MemberPhoto
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberPhoto.exists__head_MemberPhotos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MemberPhoto
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MemberPhoto.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - MemberPhoto
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberPhoto.replaceById__put_MemberPhotos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - MemberPhoto
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MemberPhoto.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MemberPhoto
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MemberPhoto.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: MemberPhoto id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
  '/MemberPhotos/{id}/replace':
    post:
      tags:
        - MemberPhoto
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberPhoto.replaceById__post_MemberPhotos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
  /MemberPhotos/findOne:
    get:
      tags:
        - MemberPhoto
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MemberPhoto.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
  /MemberPhotos/update:
    post:
      tags:
        - MemberPhoto
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MemberPhoto.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberPhoto'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MemberPhotos/count:
    get:
      tags:
        - MemberPhoto
      summary: Count instances of the model matched by where from the data source.
      operationId: MemberPhoto.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MemberPhotos/getList:
    get:
      tags:
        - MemberPhoto
      operationId: MemberPhoto.getList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MemberPhotos/adminApprovePhoto/{id}':
    get:
      tags:
        - MemberPhoto
      operationId: MemberPhoto.adminApprovePhoto
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MemberPhotos/adminRejectPhoto/{id}':
    get:
      tags:
        - MemberPhoto
      operationId: MemberPhoto.adminRejectPhoto
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/MatchMembers/{id}/members':
    get:
      tags:
        - MatchMember
      summary: Fetches belongsTo relation members.
      operationId: MatchMember.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/MatchMembers/{id}/matchMembers/{fk}':
    get:
      tags:
        - MatchMember
      summary: Find a related item by id for matchMembers.
      operationId: MatchMember.prototype.__findById__matchMembers
      parameters:
        - name: fk
          in: path
          description: Foreign key for matchMembers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    delete:
      tags:
        - MatchMember
      summary: Delete a related item by id for matchMembers.
      operationId: MatchMember.prototype.__destroyById__matchMembers
      parameters:
        - name: fk
          in: path
          description: Foreign key for matchMembers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MatchMember
      summary: Update a related item by id for matchMembers.
      operationId: MatchMember.prototype.__updateById__matchMembers
      parameters:
        - name: fk
          in: path
          description: Foreign key for matchMembers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MatchMember'
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
  '/MatchMembers/{id}/matchMembers':
    get:
      tags:
        - MatchMember
      summary: Queries matchMembers of MatchMember.
      operationId: MatchMember.prototype.__get__matchMembers
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MatchMember'
      deprecated: false
    post:
      tags:
        - MatchMember
      summary: Creates a new instance in matchMembers of this model.
      operationId: MatchMember.prototype.__create__matchMembers
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MatchMember'
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    delete:
      tags:
        - MatchMember
      summary: Deletes all matchMembers of this model.
      operationId: MatchMember.prototype.__delete__matchMembers
      parameters:
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MatchMembers/{id}/matchMembers/count':
    get:
      tags:
        - MatchMember
      summary: Counts matchMembers of MatchMember.
      operationId: MatchMember.prototype.__count__matchMembers
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MatchMembers:
    post:
      tags:
        - MatchMember
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MatchMember.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    patch:
      tags:
        - MatchMember
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MatchMember.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    put:
      tags:
        - MatchMember
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MatchMember.replaceOrCreate__put_MatchMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    get:
      tags:
        - MatchMember
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MatchMember.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MatchMember'
      deprecated: false
  /MatchMembers/replaceOrCreate:
    post:
      tags:
        - MatchMember
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MatchMember.replaceOrCreate__post_MatchMembers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
  /MatchMembers/upsertWithWhere:
    post:
      tags:
        - MatchMember
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MatchMember.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
  '/MatchMembers/{id}/exists':
    get:
      tags:
        - MatchMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'MatchMember.exists__get_MatchMembers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MatchMembers/{id}':
    head:
      tags:
        - MatchMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'MatchMember.exists__head_MatchMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MatchMember
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MatchMember.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    put:
      tags:
        - MatchMember
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MatchMember.replaceById__put_MatchMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
    delete:
      tags:
        - MatchMember
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MatchMember.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MatchMember
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MatchMember.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MatchMember'
        - name: id
          in: path
          description: MatchMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
  '/MatchMembers/{id}/replace':
    post:
      tags:
        - MatchMember
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MatchMember.replaceById__post_MatchMembers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
  /MatchMembers/findOne:
    get:
      tags:
        - MatchMember
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MatchMember.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MatchMember'
      deprecated: false
  /MatchMembers/update:
    post:
      tags:
        - MatchMember
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MatchMember.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MatchMember'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MatchMembers/count:
    get:
      tags:
        - MatchMember
      summary: Count instances of the model matched by where from the data source.
      operationId: MatchMember.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MatchMembers/getMatchList:
    get:
      tags:
        - MatchMember
      summary: Get List of Match with given User Id
      operationId: MatchMember.getMatchList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            description: Array Of Object
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Matches/{id}/chatDetails/{fk}':
    get:
      tags:
        - Matches
      summary: Find a related item by id for chatDetails.
      operationId: Matches.prototype.__findById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - Matches
      summary: Delete a related item by id for chatDetails.
      operationId: Matches.prototype.__destroyById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Matches
      summary: Update a related item by id for chatDetails.
      operationId: Matches.prototype.__updateById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  '/Matches/{id}/chatDetails':
    get:
      tags:
        - Matches
      summary: Queries chatDetails of Matches.
      operationId: Matches.prototype.__get__chatDetails
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatDetail'
      deprecated: false
    post:
      tags:
        - Matches
      summary: Creates a new instance in chatDetails of this model.
      operationId: Matches.prototype.__create__chatDetails
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - Matches
      summary: Deletes all chatDetails of this model.
      operationId: Matches.prototype.__delete__chatDetails
      parameters:
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Matches/{id}/chatDetails/count':
    get:
      tags:
        - Matches
      summary: Counts chatDetails of Matches.
      operationId: Matches.prototype.__count__chatDetails
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Matches:
    post:
      tags:
        - Matches
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Matches.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
    patch:
      tags:
        - Matches
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Matches.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
    put:
      tags:
        - Matches
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Matches.replaceOrCreate__put_Matches
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
    get:
      tags:
        - Matches
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Matches.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Matches'
      deprecated: false
  /Matches/replaceOrCreate:
    post:
      tags:
        - Matches
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Matches.replaceOrCreate__post_Matches_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
  /Matches/upsertWithWhere:
    post:
      tags:
        - Matches
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Matches.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
  '/Matches/{id}/exists':
    get:
      tags:
        - Matches
      summary: Check whether a model instance exists in the data source.
      operationId: 'Matches.exists__get_Matches_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Matches/{id}':
    head:
      tags:
        - Matches
      summary: Check whether a model instance exists in the data source.
      operationId: 'Matches.exists__head_Matches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Matches
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Matches.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
    put:
      tags:
        - Matches
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Matches.replaceById__put_Matches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
    delete:
      tags:
        - Matches
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Matches.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Matches
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Matches.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Matches'
        - name: id
          in: path
          description: Matches id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
  '/Matches/{id}/replace':
    post:
      tags:
        - Matches
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Matches.replaceById__post_Matches_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
  /Matches/findOne:
    get:
      tags:
        - Matches
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Matches.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
  /Matches/update:
    post:
      tags:
        - Matches
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Matches.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Matches'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Matches/count:
    get:
      tags:
        - Matches
      summary: Count instances of the model matched by where from the data source.
      operationId: Matches.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ViewMatches:
    post:
      tags:
        - ViewMatch
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ViewMatch.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
    patch:
      tags:
        - ViewMatch
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ViewMatch.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
    put:
      tags:
        - ViewMatch
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewMatch.replaceOrCreate__put_ViewMatches
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
    get:
      tags:
        - ViewMatch
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ViewMatch.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ViewMatch'
      deprecated: false
  /ViewMatches/replaceOrCreate:
    post:
      tags:
        - ViewMatch
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewMatch.replaceOrCreate__post_ViewMatches_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
  /ViewMatches/upsertWithWhere:
    post:
      tags:
        - ViewMatch
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ViewMatch.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
  '/ViewMatches/{id}/exists':
    get:
      tags:
        - ViewMatch
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewMatch.exists__get_ViewMatches_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ViewMatches/{id}':
    head:
      tags:
        - ViewMatch
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewMatch.exists__head_ViewMatches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ViewMatch
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ViewMatch.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
    put:
      tags:
        - ViewMatch
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewMatch.replaceById__put_ViewMatches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
    delete:
      tags:
        - ViewMatch
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ViewMatch.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ViewMatch
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ViewMatch.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewMatch'
        - name: id
          in: path
          description: ViewMatch id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
  '/ViewMatches/{id}/replace':
    post:
      tags:
        - ViewMatch
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewMatch.replaceById__post_ViewMatches_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
  /ViewMatches/findOne:
    get:
      tags:
        - ViewMatch
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ViewMatch.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMatch'
      deprecated: false
  /ViewMatches/update:
    post:
      tags:
        - ViewMatch
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ViewMatch.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewMatch'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ViewMatches/count:
    get:
      tags:
        - ViewMatch
      summary: Count instances of the model matched by where from the data source.
      operationId: ViewMatch.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/ReportMembers/{id}/memberPhotos':
    get:
      tags:
        - ReportMembers
      summary: Fetches hasOne relation memberPhotos.
      operationId: ReportMembers.prototype.__get__memberPhotos
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    post:
      tags:
        - ReportMembers
      summary: Creates a new instance in memberPhotos of this model.
      operationId: ReportMembers.prototype.__create__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - ReportMembers
      summary: Update memberPhotos of this model.
      operationId: ReportMembers.prototype.__update__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - ReportMembers
      summary: Deletes memberPhotos of this model.
      operationId: ReportMembers.prototype.__destroy__memberPhotos
      parameters:
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ReportMembers/{id}/reportMember':
    get:
      tags:
        - ReportMembers
      summary: Fetches hasOne relation reportMember.
      operationId: ReportMembers.prototype.__get__reportMember
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    post:
      tags:
        - ReportMembers
      summary: Creates a new instance in reportMember of this model.
      operationId: ReportMembers.prototype.__create__reportMember
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - ReportMembers
      summary: Update reportMember of this model.
      operationId: ReportMembers.prototype.__update__reportMember
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - ReportMembers
      summary: Deletes reportMember of this model.
      operationId: ReportMembers.prototype.__destroy__reportMember
      parameters:
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ReportMembers/{id}/reportedBy':
    get:
      tags:
        - ReportMembers
      summary: Fetches hasOne relation reportedBy.
      operationId: ReportMembers.prototype.__get__reportedBy
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    post:
      tags:
        - ReportMembers
      summary: Creates a new instance in reportedBy of this model.
      operationId: ReportMembers.prototype.__create__reportedBy
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - ReportMembers
      summary: Update reportedBy of this model.
      operationId: ReportMembers.prototype.__update__reportedBy
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - ReportMembers
      summary: Deletes reportedBy of this model.
      operationId: ReportMembers.prototype.__destroy__reportedBy
      parameters:
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /ReportMembers:
    post:
      tags:
        - ReportMembers
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ReportMembers.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
    patch:
      tags:
        - ReportMembers
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ReportMembers.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
    put:
      tags:
        - ReportMembers
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ReportMembers.replaceOrCreate__put_ReportMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
    get:
      tags:
        - ReportMembers
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ReportMembers.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ReportMembers'
      deprecated: false
  /ReportMembers/replaceOrCreate:
    post:
      tags:
        - ReportMembers
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ReportMembers.replaceOrCreate__post_ReportMembers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
  /ReportMembers/upsertWithWhere:
    post:
      tags:
        - ReportMembers
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ReportMembers.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
  '/ReportMembers/{id}/exists':
    get:
      tags:
        - ReportMembers
      summary: Check whether a model instance exists in the data source.
      operationId: 'ReportMembers.exists__get_ReportMembers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ReportMembers/{id}':
    head:
      tags:
        - ReportMembers
      summary: Check whether a model instance exists in the data source.
      operationId: 'ReportMembers.exists__head_ReportMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ReportMembers
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ReportMembers.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
    put:
      tags:
        - ReportMembers
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ReportMembers.replaceById__put_ReportMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
    delete:
      tags:
        - ReportMembers
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ReportMembers.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ReportMembers
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ReportMembers.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ReportMembers'
        - name: id
          in: path
          description: ReportMembers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
  '/ReportMembers/{id}/replace':
    post:
      tags:
        - ReportMembers
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ReportMembers.replaceById__post_ReportMembers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
  /ReportMembers/findOne:
    get:
      tags:
        - ReportMembers
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ReportMembers.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportMembers'
      deprecated: false
  /ReportMembers/update:
    post:
      tags:
        - ReportMembers
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ReportMembers.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ReportMembers'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ReportMembers/count:
    get:
      tags:
        - ReportMembers
      summary: Count instances of the model matched by where from the data source.
      operationId: ReportMembers.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ReportMembers/getReportList:
    get:
      tags:
        - ReportMembers
      operationId: ReportMembers.getReportList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ReportMembers/search:
    post:
      tags:
        - ReportMembers
      operationId: ReportMembers.search
      parameters:
        - name: search
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ApprovalViews:
    post:
      tags:
        - ApprovalView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ApprovalView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
    patch:
      tags:
        - ApprovalView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ApprovalView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
    put:
      tags:
        - ApprovalView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ApprovalView.replaceOrCreate__put_ApprovalViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
    get:
      tags:
        - ApprovalView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ApprovalView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ApprovalView'
      deprecated: false
  /ApprovalViews/replaceOrCreate:
    post:
      tags:
        - ApprovalView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ApprovalView.replaceOrCreate__post_ApprovalViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
  /ApprovalViews/upsertWithWhere:
    post:
      tags:
        - ApprovalView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ApprovalView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
  '/ApprovalViews/{id}/exists':
    get:
      tags:
        - ApprovalView
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApprovalView.exists__get_ApprovalViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ApprovalViews/{id}':
    head:
      tags:
        - ApprovalView
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApprovalView.exists__head_ApprovalViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ApprovalView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ApprovalView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
    put:
      tags:
        - ApprovalView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ApprovalView.replaceById__put_ApprovalViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
    delete:
      tags:
        - ApprovalView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ApprovalView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ApprovalView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ApprovalView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalView'
        - name: id
          in: path
          description: ApprovalView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
  '/ApprovalViews/{id}/replace':
    post:
      tags:
        - ApprovalView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ApprovalView.replaceById__post_ApprovalViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
  /ApprovalViews/findOne:
    get:
      tags:
        - ApprovalView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ApprovalView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalView'
      deprecated: false
  /ApprovalViews/update:
    post:
      tags:
        - ApprovalView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ApprovalView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ApprovalViews/count:
    get:
      tags:
        - ApprovalView
      summary: Count instances of the model matched by where from the data source.
      operationId: ApprovalView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MappingMobileCodes:
    post:
      tags:
        - MappingMobileCode
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MappingMobileCode.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
    patch:
      tags:
        - MappingMobileCode
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MappingMobileCode.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
    put:
      tags:
        - MappingMobileCode
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MappingMobileCode.replaceOrCreate__put_MappingMobileCodes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
    get:
      tags:
        - MappingMobileCode
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MappingMobileCode.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MappingMobileCode'
      deprecated: false
  /MappingMobileCodes/replaceOrCreate:
    post:
      tags:
        - MappingMobileCode
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MappingMobileCode.replaceOrCreate__post_MappingMobileCodes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
  /MappingMobileCodes/upsertWithWhere:
    post:
      tags:
        - MappingMobileCode
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MappingMobileCode.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
  '/MappingMobileCodes/{id}/exists':
    get:
      tags:
        - MappingMobileCode
      summary: Check whether a model instance exists in the data source.
      operationId: 'MappingMobileCode.exists__get_MappingMobileCodes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MappingMobileCodes/{id}':
    head:
      tags:
        - MappingMobileCode
      summary: Check whether a model instance exists in the data source.
      operationId: 'MappingMobileCode.exists__head_MappingMobileCodes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MappingMobileCode
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MappingMobileCode.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
    put:
      tags:
        - MappingMobileCode
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MappingMobileCode.replaceById__put_MappingMobileCodes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
    delete:
      tags:
        - MappingMobileCode
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MappingMobileCode.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MappingMobileCode
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MappingMobileCode.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MappingMobileCode'
        - name: id
          in: path
          description: MappingMobileCode id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
  '/MappingMobileCodes/{id}/replace':
    post:
      tags:
        - MappingMobileCode
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MappingMobileCode.replaceById__post_MappingMobileCodes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
  /MappingMobileCodes/findOne:
    get:
      tags:
        - MappingMobileCode
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MappingMobileCode.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMobileCode'
      deprecated: false
  /MappingMobileCodes/update:
    post:
      tags:
        - MappingMobileCode
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MappingMobileCode.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MappingMobileCode'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MappingMobileCodes/count:
    get:
      tags:
        - MappingMobileCode
      summary: Count instances of the model matched by where from the data source.
      operationId: MappingMobileCode.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /StatusVerifyRates:
    post:
      tags:
        - StatusVerifyRate
      summary: Create a new instance of the model and persist it into the data source.
      operationId: StatusVerifyRate.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
    patch:
      tags:
        - StatusVerifyRate
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: StatusVerifyRate.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
    put:
      tags:
        - StatusVerifyRate
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: StatusVerifyRate.replaceOrCreate__put_StatusVerifyRates
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
    get:
      tags:
        - StatusVerifyRate
      summary: Find all instances of the model matched by filter from the data source.
      operationId: StatusVerifyRate.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
  /StatusVerifyRates/replaceOrCreate:
    post:
      tags:
        - StatusVerifyRate
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: StatusVerifyRate.replaceOrCreate__post_StatusVerifyRates_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
  /StatusVerifyRates/upsertWithWhere:
    post:
      tags:
        - StatusVerifyRate
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: StatusVerifyRate.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
  '/StatusVerifyRates/{id}/exists':
    get:
      tags:
        - StatusVerifyRate
      summary: Check whether a model instance exists in the data source.
      operationId: 'StatusVerifyRate.exists__get_StatusVerifyRates_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/StatusVerifyRates/{id}':
    head:
      tags:
        - StatusVerifyRate
      summary: Check whether a model instance exists in the data source.
      operationId: 'StatusVerifyRate.exists__head_StatusVerifyRates_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - StatusVerifyRate
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: StatusVerifyRate.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
    put:
      tags:
        - StatusVerifyRate
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'StatusVerifyRate.replaceById__put_StatusVerifyRates_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
    delete:
      tags:
        - StatusVerifyRate
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: StatusVerifyRate.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - StatusVerifyRate
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: StatusVerifyRate.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StatusVerifyRate'
        - name: id
          in: path
          description: StatusVerifyRate id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
  '/StatusVerifyRates/{id}/replace':
    post:
      tags:
        - StatusVerifyRate
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'StatusVerifyRate.replaceById__post_StatusVerifyRates_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
  /StatusVerifyRates/findOne:
    get:
      tags:
        - StatusVerifyRate
      summary: Find first instance of the model matched by filter from the data source.
      operationId: StatusVerifyRate.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyRate'
      deprecated: false
  /StatusVerifyRates/update:
    post:
      tags:
        - StatusVerifyRate
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: StatusVerifyRate.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StatusVerifyRate'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /StatusVerifyRates/count:
    get:
      tags:
        - StatusVerifyRate
      summary: Count instances of the model matched by where from the data source.
      operationId: StatusVerifyRate.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /StatusVerifyUsers:
    post:
      tags:
        - StatusVerifyUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: StatusVerifyUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
    patch:
      tags:
        - StatusVerifyUser
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: StatusVerifyUser.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
    put:
      tags:
        - StatusVerifyUser
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: StatusVerifyUser.replaceOrCreate__put_StatusVerifyUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
    get:
      tags:
        - StatusVerifyUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: StatusVerifyUser.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
  /StatusVerifyUsers/replaceOrCreate:
    post:
      tags:
        - StatusVerifyUser
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: StatusVerifyUser.replaceOrCreate__post_StatusVerifyUsers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
  /StatusVerifyUsers/upsertWithWhere:
    post:
      tags:
        - StatusVerifyUser
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: StatusVerifyUser.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
  '/StatusVerifyUsers/{id}/exists':
    get:
      tags:
        - StatusVerifyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'StatusVerifyUser.exists__get_StatusVerifyUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/StatusVerifyUsers/{id}':
    head:
      tags:
        - StatusVerifyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'StatusVerifyUser.exists__head_StatusVerifyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - StatusVerifyUser
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: StatusVerifyUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
    put:
      tags:
        - StatusVerifyUser
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'StatusVerifyUser.replaceById__put_StatusVerifyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
    delete:
      tags:
        - StatusVerifyUser
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: StatusVerifyUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - StatusVerifyUser
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: StatusVerifyUser.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StatusVerifyUser'
        - name: id
          in: path
          description: StatusVerifyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
  '/StatusVerifyUsers/{id}/replace':
    post:
      tags:
        - StatusVerifyUser
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'StatusVerifyUser.replaceById__post_StatusVerifyUsers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
  /StatusVerifyUsers/findOne:
    get:
      tags:
        - StatusVerifyUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: StatusVerifyUser.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StatusVerifyUser'
      deprecated: false
  /StatusVerifyUsers/update:
    post:
      tags:
        - StatusVerifyUser
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: StatusVerifyUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StatusVerifyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /StatusVerifyUsers/count:
    get:
      tags:
        - StatusVerifyUser
      summary: Count instances of the model matched by where from the data source.
      operationId: StatusVerifyUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /PhotoKtps:
    post:
      tags:
        - PhotoKtp
      summary: Create a new instance of the model and persist it into the data source.
      operationId: PhotoKtp.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
    patch:
      tags:
        - PhotoKtp
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: PhotoKtp.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
    put:
      tags:
        - PhotoKtp
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: PhotoKtp.replaceOrCreate__put_PhotoKtps
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
    get:
      tags:
        - PhotoKtp
      summary: Find all instances of the model matched by filter from the data source.
      operationId: PhotoKtp.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PhotoKtp'
      deprecated: false
  /PhotoKtps/replaceOrCreate:
    post:
      tags:
        - PhotoKtp
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: PhotoKtp.replaceOrCreate__post_PhotoKtps_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
  /PhotoKtps/upsertWithWhere:
    post:
      tags:
        - PhotoKtp
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: PhotoKtp.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
  '/PhotoKtps/{id}/exists':
    get:
      tags:
        - PhotoKtp
      summary: Check whether a model instance exists in the data source.
      operationId: 'PhotoKtp.exists__get_PhotoKtps_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/PhotoKtps/{id}':
    head:
      tags:
        - PhotoKtp
      summary: Check whether a model instance exists in the data source.
      operationId: 'PhotoKtp.exists__head_PhotoKtps_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - PhotoKtp
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: PhotoKtp.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
    put:
      tags:
        - PhotoKtp
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'PhotoKtp.replaceById__put_PhotoKtps_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
    delete:
      tags:
        - PhotoKtp
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: PhotoKtp.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - PhotoKtp
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: PhotoKtp.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PhotoKtp'
        - name: id
          in: path
          description: PhotoKtp id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
  '/PhotoKtps/{id}/replace':
    post:
      tags:
        - PhotoKtp
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'PhotoKtp.replaceById__post_PhotoKtps_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
  /PhotoKtps/findOne:
    get:
      tags:
        - PhotoKtp
      summary: Find first instance of the model matched by filter from the data source.
      operationId: PhotoKtp.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PhotoKtp'
      deprecated: false
  /PhotoKtps/update:
    post:
      tags:
        - PhotoKtp
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: PhotoKtp.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PhotoKtp'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /PhotoKtps/count:
    get:
      tags:
        - PhotoKtp
      summary: Count instances of the model matched by where from the data source.
      operationId: PhotoKtp.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MemberVerifyStatuses/{id}/memberPhotos':
    get:
      tags:
        - MemberVerifyStatus
      summary: Fetches hasOne relation memberPhotos.
      operationId: MemberVerifyStatus.prototype.__get__memberPhotos
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MemberVerifyStatus id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    post:
      tags:
        - MemberVerifyStatus
      summary: Creates a new instance in memberPhotos of this model.
      operationId: MemberVerifyStatus.prototype.__create__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: MemberVerifyStatus id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - MemberVerifyStatus
      summary: Update memberPhotos of this model.
      operationId: MemberVerifyStatus.prototype.__update__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: MemberVerifyStatus id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - MemberVerifyStatus
      summary: Deletes memberPhotos of this model.
      operationId: MemberVerifyStatus.prototype.__destroy__memberPhotos
      parameters:
        - name: id
          in: path
          description: MemberVerifyStatus id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MemberVerifyStatuses/{id}/members':
    get:
      tags:
        - MemberVerifyStatus
      summary: Fetches belongsTo relation members.
      operationId: MemberVerifyStatus.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MemberVerifyStatus id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /MemberVerifyStatuses:
    post:
      tags:
        - MemberVerifyStatus
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MemberVerifyStatus.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
    patch:
      tags:
        - MemberVerifyStatus
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MemberVerifyStatus.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
    put:
      tags:
        - MemberVerifyStatus
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberVerifyStatus.replaceOrCreate__put_MemberVerifyStatuses
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
    get:
      tags:
        - MemberVerifyStatus
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MemberVerifyStatus.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
  /MemberVerifyStatuses/replaceOrCreate:
    post:
      tags:
        - MemberVerifyStatus
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MemberVerifyStatus.replaceOrCreate__post_MemberVerifyStatuses_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
  /MemberVerifyStatuses/upsertWithWhere:
    post:
      tags:
        - MemberVerifyStatus
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MemberVerifyStatus.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
  '/MemberVerifyStatuses/{id}/exists':
    get:
      tags:
        - MemberVerifyStatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberVerifyStatus.exists__get_MemberVerifyStatuses_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MemberVerifyStatuses/{id}':
    head:
      tags:
        - MemberVerifyStatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'MemberVerifyStatus.exists__head_MemberVerifyStatuses_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MemberVerifyStatus
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MemberVerifyStatus.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
    put:
      tags:
        - MemberVerifyStatus
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberVerifyStatus.replaceById__put_MemberVerifyStatuses_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
    delete:
      tags:
        - MemberVerifyStatus
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MemberVerifyStatus.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MemberVerifyStatus
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MemberVerifyStatus.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberVerifyStatus'
        - name: id
          in: path
          description: MemberVerifyStatus id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
  '/MemberVerifyStatuses/{id}/replace':
    post:
      tags:
        - MemberVerifyStatus
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MemberVerifyStatus.replaceById__post_MemberVerifyStatuses_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
  /MemberVerifyStatuses/findOne:
    get:
      tags:
        - MemberVerifyStatus
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MemberVerifyStatus.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberVerifyStatus'
      deprecated: false
  /MemberVerifyStatuses/update:
    post:
      tags:
        - MemberVerifyStatus
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MemberVerifyStatus.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MemberVerifyStatus'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MemberVerifyStatuses/count:
    get:
      tags:
        - MemberVerifyStatus
      summary: Count instances of the model matched by where from the data source.
      operationId: MemberVerifyStatus.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MemberVerifyStatuses/isUserNeedVerify:
    post:
      tags:
        - MemberVerifyStatus
      summary: Check User need verify or not.
      operationId: MemberVerifyStatus.isUserNeedVerify
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                description: result is true or false
                type: boolean
      deprecated: false
  /MemberVerifyStatuses/getVerifyStatusByUserId:
    post:
      tags:
        - MemberVerifyStatus
      operationId: MemberVerifyStatus.getVerifyStatusByUserId
      parameters:
        - name: userId
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
              result:
                type: object
              error:
                type: object
      deprecated: false
  /MemberVerifyStatuses/getVerifyScoreByUserId:
    post:
      tags:
        - MemberVerifyStatus
      operationId: MemberVerifyStatus.getVerifyScoreByUserId
      parameters:
        - name: userId
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
              result:
                type: object
              error:
                type: object
      deprecated: false
  /MemberVerifyStatuses/changeVerifyStatus:
    post:
      tags:
        - MemberVerifyStatus
      summary: Changing MemberVerifyStatus value by User Id
      operationId: MemberVerifyStatus.changeVerifyStatus
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
        - name: key
          in: formData
          required: true
          type: string
        - name: value
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
              result:
                type: object
              error:
                type: object
      deprecated: false
  /MemberVerifyStatuses/sendEmailVerification:
    post:
      tags:
        - MemberVerifyStatus
      summary: Sending Email for Verification
      operationId: MemberVerifyStatus.sendEmailVerification
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: boolean
      deprecated: false
  /MemberVerifyStatuses/adminApproveVerify:
    post:
      tags:
        - MemberVerifyStatus
      operationId: MemberVerifyStatus.adminApproveVerify
      parameters:
        - name: targetId
          in: formData
          required: true
          type: number
          format: double
        - name: targetVerify
          in: formData
          required: true
          type: string
        - name: verifyImg
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /MemberVerifyStatuses/adminRejectVerify:
    post:
      tags:
        - MemberVerifyStatus
      operationId: MemberVerifyStatus.adminRejectVerify
      parameters:
        - name: targetId
          in: formData
          required: true
          type: number
          format: double
        - name: targetVerify
          in: formData
          required: true
          type: string
        - name: verifyImg
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /VerificationViews:
    post:
      tags:
        - VerificationView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: VerificationView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
    patch:
      tags:
        - VerificationView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: VerificationView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
    put:
      tags:
        - VerificationView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: VerificationView.replaceOrCreate__put_VerificationViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
    get:
      tags:
        - VerificationView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: VerificationView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VerificationView'
      deprecated: false
  /VerificationViews/replaceOrCreate:
    post:
      tags:
        - VerificationView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: VerificationView.replaceOrCreate__post_VerificationViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
  /VerificationViews/upsertWithWhere:
    post:
      tags:
        - VerificationView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: VerificationView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
  '/VerificationViews/{id}/exists':
    get:
      tags:
        - VerificationView
      summary: Check whether a model instance exists in the data source.
      operationId: 'VerificationView.exists__get_VerificationViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/VerificationViews/{id}':
    head:
      tags:
        - VerificationView
      summary: Check whether a model instance exists in the data source.
      operationId: 'VerificationView.exists__head_VerificationViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - VerificationView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: VerificationView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
    put:
      tags:
        - VerificationView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'VerificationView.replaceById__put_VerificationViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
    delete:
      tags:
        - VerificationView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: VerificationView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - VerificationView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: VerificationView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VerificationView'
        - name: id
          in: path
          description: VerificationView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
  '/VerificationViews/{id}/replace':
    post:
      tags:
        - VerificationView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'VerificationView.replaceById__post_VerificationViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
  /VerificationViews/findOne:
    get:
      tags:
        - VerificationView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: VerificationView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VerificationView'
      deprecated: false
  /VerificationViews/update:
    post:
      tags:
        - VerificationView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: VerificationView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VerificationView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /VerificationViews/count:
    get:
      tags:
        - VerificationView
      summary: Count instances of the model matched by where from the data source.
      operationId: VerificationView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /VerificationViews/getVerificationList:
    get:
      tags:
        - VerificationView
      summary: Verification List
      operationId: VerificationView.getVerificationList
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
              result:
                type: array
                items:
                  type: object
              error:
                type: object
      deprecated: false
  /ApprovalContentViews:
    post:
      tags:
        - ApprovalContentView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ApprovalContentView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
    patch:
      tags:
        - ApprovalContentView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ApprovalContentView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
    put:
      tags:
        - ApprovalContentView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ApprovalContentView.replaceOrCreate__put_ApprovalContentViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
    get:
      tags:
        - ApprovalContentView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ApprovalContentView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ApprovalContentView'
      deprecated: false
  /ApprovalContentViews/replaceOrCreate:
    post:
      tags:
        - ApprovalContentView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ApprovalContentView.replaceOrCreate__post_ApprovalContentViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
  /ApprovalContentViews/upsertWithWhere:
    post:
      tags:
        - ApprovalContentView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ApprovalContentView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
  '/ApprovalContentViews/{id}/exists':
    get:
      tags:
        - ApprovalContentView
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApprovalContentView.exists__get_ApprovalContentViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ApprovalContentViews/{id}':
    head:
      tags:
        - ApprovalContentView
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApprovalContentView.exists__head_ApprovalContentViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ApprovalContentView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ApprovalContentView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
    put:
      tags:
        - ApprovalContentView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ApprovalContentView.replaceById__put_ApprovalContentViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
    delete:
      tags:
        - ApprovalContentView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ApprovalContentView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ApprovalContentView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ApprovalContentView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalContentView'
        - name: id
          in: path
          description: ApprovalContentView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
  '/ApprovalContentViews/{id}/replace':
    post:
      tags:
        - ApprovalContentView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ApprovalContentView.replaceById__post_ApprovalContentViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
  /ApprovalContentViews/findOne:
    get:
      tags:
        - ApprovalContentView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ApprovalContentView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalContentView'
      deprecated: false
  /ApprovalContentViews/update:
    post:
      tags:
        - ApprovalContentView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ApprovalContentView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalContentView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ApprovalContentViews/count:
    get:
      tags:
        - ApprovalContentView
      summary: Count instances of the model matched by where from the data source.
      operationId: ApprovalContentView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ApprovalMessages:
    post:
      tags:
        - ApprovalMessage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ApprovalMessage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
    patch:
      tags:
        - ApprovalMessage
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ApprovalMessage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
    put:
      tags:
        - ApprovalMessage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ApprovalMessage.replaceOrCreate__put_ApprovalMessages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
    get:
      tags:
        - ApprovalMessage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ApprovalMessage.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ApprovalMessage'
      deprecated: false
  /ApprovalMessages/replaceOrCreate:
    post:
      tags:
        - ApprovalMessage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ApprovalMessage.replaceOrCreate__post_ApprovalMessages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
  /ApprovalMessages/upsertWithWhere:
    post:
      tags:
        - ApprovalMessage
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ApprovalMessage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
  '/ApprovalMessages/{id}/exists':
    get:
      tags:
        - ApprovalMessage
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApprovalMessage.exists__get_ApprovalMessages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ApprovalMessages/{id}':
    head:
      tags:
        - ApprovalMessage
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApprovalMessage.exists__head_ApprovalMessages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ApprovalMessage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ApprovalMessage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
    put:
      tags:
        - ApprovalMessage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ApprovalMessage.replaceById__put_ApprovalMessages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
    delete:
      tags:
        - ApprovalMessage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ApprovalMessage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ApprovalMessage
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ApprovalMessage.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalMessage'
        - name: id
          in: path
          description: ApprovalMessage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
  '/ApprovalMessages/{id}/replace':
    post:
      tags:
        - ApprovalMessage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ApprovalMessage.replaceById__post_ApprovalMessages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
  /ApprovalMessages/findOne:
    get:
      tags:
        - ApprovalMessage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ApprovalMessage.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApprovalMessage'
      deprecated: false
  /ApprovalMessages/update:
    post:
      tags:
        - ApprovalMessage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ApprovalMessage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApprovalMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ApprovalMessages/count:
    get:
      tags:
        - ApprovalMessage
      summary: Count instances of the model matched by where from the data source.
      operationId: ApprovalMessage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ApprovalMessages/sendRejectMessage:
    post:
      tags:
        - ApprovalMessage
      summary: Send Rejected Approval Message to User
      operationId: ApprovalMessage.sendRejectMessage
      parameters:
        - name: fromId
          in: formData
          required: true
          type: number
          format: double
        - name: toId
          in: formData
          required: true
          type: number
          format: double
        - name: tag
          in: formData
          required: true
          type: string
        - name: message
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
              result:
                type: object
              error:
                type: object
      deprecated: false
  /Hobbies:
    post:
      tags:
        - Hobby
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Hobby.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
    patch:
      tags:
        - Hobby
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Hobby.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
    put:
      tags:
        - Hobby
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Hobby.replaceOrCreate__put_Hobbies
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
    get:
      tags:
        - Hobby
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Hobby.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Hobby'
      deprecated: false
  /Hobbies/replaceOrCreate:
    post:
      tags:
        - Hobby
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Hobby.replaceOrCreate__post_Hobbies_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
  /Hobbies/upsertWithWhere:
    post:
      tags:
        - Hobby
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Hobby.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
  '/Hobbies/{id}/exists':
    get:
      tags:
        - Hobby
      summary: Check whether a model instance exists in the data source.
      operationId: 'Hobby.exists__get_Hobbies_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Hobbies/{id}':
    head:
      tags:
        - Hobby
      summary: Check whether a model instance exists in the data source.
      operationId: 'Hobby.exists__head_Hobbies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Hobby
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Hobby.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
    put:
      tags:
        - Hobby
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Hobby.replaceById__put_Hobbies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
    delete:
      tags:
        - Hobby
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Hobby.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Hobby
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Hobby.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Hobby'
        - name: id
          in: path
          description: Hobby id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
  '/Hobbies/{id}/replace':
    post:
      tags:
        - Hobby
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Hobby.replaceById__post_Hobbies_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
  /Hobbies/findOne:
    get:
      tags:
        - Hobby
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Hobby.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Hobby'
      deprecated: false
  /Hobbies/update:
    post:
      tags:
        - Hobby
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Hobby.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Hobby'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Hobbies/count:
    get:
      tags:
        - Hobby
      summary: Count instances of the model matched by where from the data source.
      operationId: Hobby.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MappingMemberTokens:
    post:
      tags:
        - MappingMemberToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MappingMemberToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
    patch:
      tags:
        - MappingMemberToken
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MappingMemberToken.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
    put:
      tags:
        - MappingMemberToken
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MappingMemberToken.replaceOrCreate__put_MappingMemberTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
    get:
      tags:
        - MappingMemberToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MappingMemberToken.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MappingMemberToken'
      deprecated: false
  /MappingMemberTokens/replaceOrCreate:
    post:
      tags:
        - MappingMemberToken
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MappingMemberToken.replaceOrCreate__post_MappingMemberTokens_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
  /MappingMemberTokens/upsertWithWhere:
    post:
      tags:
        - MappingMemberToken
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MappingMemberToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
  '/MappingMemberTokens/{id}/exists':
    get:
      tags:
        - MappingMemberToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'MappingMemberToken.exists__get_MappingMemberTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MappingMemberTokens/{id}':
    head:
      tags:
        - MappingMemberToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'MappingMemberToken.exists__head_MappingMemberTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MappingMemberToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MappingMemberToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
    put:
      tags:
        - MappingMemberToken
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MappingMemberToken.replaceById__put_MappingMemberTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
    delete:
      tags:
        - MappingMemberToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MappingMemberToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MappingMemberToken
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MappingMemberToken.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MappingMemberToken'
        - name: id
          in: path
          description: MappingMemberToken id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
  '/MappingMemberTokens/{id}/replace':
    post:
      tags:
        - MappingMemberToken
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MappingMemberToken.replaceById__post_MappingMemberTokens_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
  /MappingMemberTokens/findOne:
    get:
      tags:
        - MappingMemberToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MappingMemberToken.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MappingMemberToken'
      deprecated: false
  /MappingMemberTokens/update:
    post:
      tags:
        - MappingMemberToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MappingMemberToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MappingMemberToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MappingMemberTokens/count:
    get:
      tags:
        - MappingMemberToken
      summary: Count instances of the model matched by where from the data source.
      operationId: MappingMemberToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MappingMemberTokens/registerToken:
    post:
      tags:
        - MappingMemberToken
      summary: Registering Token of User in DB
      operationId: MappingMemberToken.registerToken
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
        - name: token
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: boolean
      deprecated: false
  /LikeViews:
    post:
      tags:
        - LikeView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: LikeView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
    patch:
      tags:
        - LikeView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LikeView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
    put:
      tags:
        - LikeView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LikeView.replaceOrCreate__put_LikeViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
    get:
      tags:
        - LikeView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: LikeView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/LikeView'
      deprecated: false
  /LikeViews/replaceOrCreate:
    post:
      tags:
        - LikeView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LikeView.replaceOrCreate__post_LikeViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
  /LikeViews/upsertWithWhere:
    post:
      tags:
        - LikeView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: LikeView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
  '/LikeViews/{id}/exists':
    get:
      tags:
        - LikeView
      summary: Check whether a model instance exists in the data source.
      operationId: 'LikeView.exists__get_LikeViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/LikeViews/{id}':
    head:
      tags:
        - LikeView
      summary: Check whether a model instance exists in the data source.
      operationId: 'LikeView.exists__head_LikeViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - LikeView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: LikeView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
    put:
      tags:
        - LikeView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'LikeView.replaceById__put_LikeViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
    delete:
      tags:
        - LikeView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: LikeView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - LikeView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: LikeView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LikeView'
        - name: id
          in: path
          description: LikeView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
  '/LikeViews/{id}/replace':
    post:
      tags:
        - LikeView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'LikeView.replaceById__post_LikeViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
  /LikeViews/findOne:
    get:
      tags:
        - LikeView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: LikeView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LikeView'
      deprecated: false
  /LikeViews/update:
    post:
      tags:
        - LikeView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: LikeView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LikeView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /LikeViews/count:
    get:
      tags:
        - LikeView
      summary: Count instances of the model matched by where from the data source.
      operationId: LikeView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ViewLikeMes:
    post:
      tags:
        - ViewLikeMe
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ViewLikeMe.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
    patch:
      tags:
        - ViewLikeMe
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ViewLikeMe.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
    put:
      tags:
        - ViewLikeMe
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewLikeMe.replaceOrCreate__put_ViewLikeMes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
    get:
      tags:
        - ViewLikeMe
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ViewLikeMe.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ViewLikeMe'
      deprecated: false
  /ViewLikeMes/replaceOrCreate:
    post:
      tags:
        - ViewLikeMe
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewLikeMe.replaceOrCreate__post_ViewLikeMes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
  /ViewLikeMes/upsertWithWhere:
    post:
      tags:
        - ViewLikeMe
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ViewLikeMe.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
  '/ViewLikeMes/{id}/exists':
    get:
      tags:
        - ViewLikeMe
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewLikeMe.exists__get_ViewLikeMes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ViewLikeMes/{id}':
    head:
      tags:
        - ViewLikeMe
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewLikeMe.exists__head_ViewLikeMes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ViewLikeMe
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ViewLikeMe.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
    put:
      tags:
        - ViewLikeMe
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewLikeMe.replaceById__put_ViewLikeMes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
    delete:
      tags:
        - ViewLikeMe
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ViewLikeMe.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ViewLikeMe
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ViewLikeMe.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewLikeMe'
        - name: id
          in: path
          description: ViewLikeMe id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
  '/ViewLikeMes/{id}/replace':
    post:
      tags:
        - ViewLikeMe
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewLikeMe.replaceById__post_ViewLikeMes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
  /ViewLikeMes/findOne:
    get:
      tags:
        - ViewLikeMe
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ViewLikeMe.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewLikeMe'
      deprecated: false
  /ViewLikeMes/update:
    post:
      tags:
        - ViewLikeMe
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ViewLikeMe.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewLikeMe'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ViewLikeMes/count:
    get:
      tags:
        - ViewLikeMe
      summary: Count instances of the model matched by where from the data source.
      operationId: ViewLikeMe.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Devicetokenmappings:
    post:
      tags:
        - Devicetokenmapping
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Devicetokenmapping.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
    patch:
      tags:
        - Devicetokenmapping
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Devicetokenmapping.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
    put:
      tags:
        - Devicetokenmapping
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Devicetokenmapping.replaceOrCreate__put_Devicetokenmappings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
    get:
      tags:
        - Devicetokenmapping
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Devicetokenmapping.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
  /Devicetokenmappings/replaceOrCreate:
    post:
      tags:
        - Devicetokenmapping
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Devicetokenmapping.replaceOrCreate__post_Devicetokenmappings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
  /Devicetokenmappings/upsertWithWhere:
    post:
      tags:
        - Devicetokenmapping
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Devicetokenmapping.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
  '/Devicetokenmappings/{id}/exists':
    get:
      tags:
        - Devicetokenmapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'Devicetokenmapping.exists__get_Devicetokenmappings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Devicetokenmappings/{id}':
    head:
      tags:
        - Devicetokenmapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'Devicetokenmapping.exists__head_Devicetokenmappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Devicetokenmapping
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Devicetokenmapping.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
    put:
      tags:
        - Devicetokenmapping
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Devicetokenmapping.replaceById__put_Devicetokenmappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
    delete:
      tags:
        - Devicetokenmapping
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Devicetokenmapping.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Devicetokenmapping
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Devicetokenmapping.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Devicetokenmapping'
        - name: id
          in: path
          description: Devicetokenmapping id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
  '/Devicetokenmappings/{id}/replace':
    post:
      tags:
        - Devicetokenmapping
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Devicetokenmapping.replaceById__post_Devicetokenmappings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
  /Devicetokenmappings/findOne:
    get:
      tags:
        - Devicetokenmapping
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Devicetokenmapping.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Devicetokenmapping'
      deprecated: false
  /Devicetokenmappings/update:
    post:
      tags:
        - Devicetokenmapping
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Devicetokenmapping.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Devicetokenmapping'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Devicetokenmappings/count:
    get:
      tags:
        - Devicetokenmapping
      summary: Count instances of the model matched by where from the data source.
      operationId: Devicetokenmapping.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Devicetokenmappings/registerToken:
    post:
      tags:
        - Devicetokenmapping
      summary: Registering Device Token from User
      operationId: Devicetokenmapping.registerToken
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
        - name: token
          in: formData
          description: Token get from push service
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                description: Object of Device Token Mapping
                type: object
      deprecated: false
  /Devicetokenmappings/getUserToken:
    post:
      tags:
        - Devicetokenmapping
      summary: 'Get User Token, by sending userId'
      operationId: Devicetokenmapping.getUserToken
      parameters:
        - name: userId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                description: 'User Token, type string'
                type: string
      deprecated: false
  /Devicetokenmappings/removeToken:
    post:
      tags:
        - Devicetokenmapping
      summary: UnRegistering Device Token from User
      operationId: Devicetokenmapping.removeToken
      parameters:
        - name: token
          in: formData
          description: Token get from push service
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                description: Object of Device Token Mapping
                type: object
      deprecated: false
  /ViewMembers:
    post:
      tags:
        - ViewMember
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ViewMember.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
    patch:
      tags:
        - ViewMember
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ViewMember.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
    put:
      tags:
        - ViewMember
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewMember.replaceOrCreate__put_ViewMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
    get:
      tags:
        - ViewMember
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ViewMember.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ViewMember'
      deprecated: false
  /ViewMembers/replaceOrCreate:
    post:
      tags:
        - ViewMember
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewMember.replaceOrCreate__post_ViewMembers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
  /ViewMembers/upsertWithWhere:
    post:
      tags:
        - ViewMember
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ViewMember.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
  '/ViewMembers/{id}/exists':
    get:
      tags:
        - ViewMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewMember.exists__get_ViewMembers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ViewMembers/{id}':
    head:
      tags:
        - ViewMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewMember.exists__head_ViewMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ViewMember
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ViewMember.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
    put:
      tags:
        - ViewMember
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewMember.replaceById__put_ViewMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
    delete:
      tags:
        - ViewMember
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ViewMember.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ViewMember
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ViewMember.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewMember'
        - name: id
          in: path
          description: ViewMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
  '/ViewMembers/{id}/replace':
    post:
      tags:
        - ViewMember
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewMember.replaceById__post_ViewMembers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
  /ViewMembers/findOne:
    get:
      tags:
        - ViewMember
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ViewMember.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewMember'
      deprecated: false
  /ViewMembers/update:
    post:
      tags:
        - ViewMember
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ViewMember.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewMember'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ViewMembers/count:
    get:
      tags:
        - ViewMember
      summary: Count instances of the model matched by where from the data source.
      operationId: ViewMember.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /SettingHomes:
    post:
      tags:
        - SettingHome
      summary: Create a new instance of the model and persist it into the data source.
      operationId: SettingHome.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    patch:
      tags:
        - SettingHome
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: SettingHome.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    put:
      tags:
        - SettingHome
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: SettingHome.replaceOrCreate__put_SettingHomes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    get:
      tags:
        - SettingHome
      summary: Find all instances of the model matched by filter from the data source.
      operationId: SettingHome.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/SettingHome'
      deprecated: false
  /SettingHomes/replaceOrCreate:
    post:
      tags:
        - SettingHome
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: SettingHome.replaceOrCreate__post_SettingHomes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
  /SettingHomes/upsertWithWhere:
    post:
      tags:
        - SettingHome
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: SettingHome.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
  '/SettingHomes/{id}/exists':
    get:
      tags:
        - SettingHome
      summary: Check whether a model instance exists in the data source.
      operationId: 'SettingHome.exists__get_SettingHomes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/SettingHomes/{id}':
    head:
      tags:
        - SettingHome
      summary: Check whether a model instance exists in the data source.
      operationId: 'SettingHome.exists__head_SettingHomes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - SettingHome
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: SettingHome.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    put:
      tags:
        - SettingHome
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'SettingHome.replaceById__put_SettingHomes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    delete:
      tags:
        - SettingHome
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: SettingHome.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - SettingHome
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: SettingHome.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: SettingHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
  '/SettingHomes/{id}/replace':
    post:
      tags:
        - SettingHome
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'SettingHome.replaceById__post_SettingHomes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
  /SettingHomes/findOne:
    get:
      tags:
        - SettingHome
      summary: Find first instance of the model matched by filter from the data source.
      operationId: SettingHome.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
  /SettingHomes/update:
    post:
      tags:
        - SettingHome
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: SettingHome.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SettingHome'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /SettingHomes/count:
    get:
      tags:
        - SettingHome
      summary: Count instances of the model matched by where from the data source.
      operationId: SettingHome.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /SettingHomes/registerSettingHome:
    get:
      tags:
        - SettingHome
      summary: Registering Setting Home for Current Authorized User.
      operationId: SettingHome.registerSettingHome
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/ViewHomes/{id}/rel_visibility/{fk}':
    get:
      tags:
        - ViewHome
      summary: Find a related item by id for rel_visibility.
      operationId: ViewHome.prototype.__findById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - ViewHome
      summary: Delete a related item by id for rel_visibility.
      operationId: ViewHome.prototype.__destroyById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - ViewHome
      summary: Update a related item by id for rel_visibility.
      operationId: ViewHome.prototype.__updateById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/ViewHomes/{id}/rel_visibility':
    get:
      tags:
        - ViewHome
      summary: Queries rel_visibility of ViewHome.
      operationId: ViewHome.prototype.__get__rel_visibility
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VisibilityData'
      deprecated: false
    post:
      tags:
        - ViewHome
      summary: Creates a new instance in rel_visibility of this model.
      operationId: ViewHome.prototype.__create__rel_visibility
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - ViewHome
      summary: Deletes all rel_visibility of this model.
      operationId: ViewHome.prototype.__delete__rel_visibility
      parameters:
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ViewHomes/{id}/rel_visibility/count':
    get:
      tags:
        - ViewHome
      summary: Counts rel_visibility of ViewHome.
      operationId: ViewHome.prototype.__count__rel_visibility
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ViewHomes:
    post:
      tags:
        - ViewHome
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ViewHome.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
    patch:
      tags:
        - ViewHome
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ViewHome.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
    put:
      tags:
        - ViewHome
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewHome.replaceOrCreate__put_ViewHomes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
    get:
      tags:
        - ViewHome
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ViewHome.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ViewHome'
      deprecated: false
  /ViewHomes/replaceOrCreate:
    post:
      tags:
        - ViewHome
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ViewHome.replaceOrCreate__post_ViewHomes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
  /ViewHomes/upsertWithWhere:
    post:
      tags:
        - ViewHome
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ViewHome.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
  '/ViewHomes/{id}/exists':
    get:
      tags:
        - ViewHome
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewHome.exists__get_ViewHomes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ViewHomes/{id}':
    head:
      tags:
        - ViewHome
      summary: Check whether a model instance exists in the data source.
      operationId: 'ViewHome.exists__head_ViewHomes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ViewHome
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ViewHome.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
    put:
      tags:
        - ViewHome
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewHome.replaceById__put_ViewHomes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
    delete:
      tags:
        - ViewHome
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ViewHome.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ViewHome
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ViewHome.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewHome'
        - name: id
          in: path
          description: ViewHome id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
  '/ViewHomes/{id}/replace':
    post:
      tags:
        - ViewHome
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ViewHome.replaceById__post_ViewHomes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
  /ViewHomes/findOne:
    get:
      tags:
        - ViewHome
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ViewHome.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ViewHome'
      deprecated: false
  /ViewHomes/update:
    post:
      tags:
        - ViewHome
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ViewHome.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ViewHome'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ViewHomes/count:
    get:
      tags:
        - ViewHome
      summary: Count instances of the model matched by where from the data source.
      operationId: ViewHome.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ViewHomes/getHomeList:
    post:
      tags:
        - ViewHome
      summary: Get List of Data for Home Page (Find My Love)
      operationId: ViewHome.getHomeList
      parameters:
        - name: limit
          in: formData
          required: true
          type: number
          format: double
        - name: excludeList
          in: formData
          description: Optional Exclude list
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
      deprecated: false
  '/VisibilityData/{id}/visibilityData/{fk}':
    get:
      tags:
        - VisibilityData
      summary: Find a related item by id for visibilityData.
      operationId: VisibilityData.prototype.__findById__visibilityData
      parameters:
        - name: fk
          in: path
          description: Foreign key for visibilityData
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - VisibilityData
      summary: Delete a related item by id for visibilityData.
      operationId: VisibilityData.prototype.__destroyById__visibilityData
      parameters:
        - name: fk
          in: path
          description: Foreign key for visibilityData
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - VisibilityData
      summary: Update a related item by id for visibilityData.
      operationId: VisibilityData.prototype.__updateById__visibilityData
      parameters:
        - name: fk
          in: path
          description: Foreign key for visibilityData
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/VisibilityData/{id}/visibilityData':
    get:
      tags:
        - VisibilityData
      summary: Queries visibilityData of VisibilityData.
      operationId: VisibilityData.prototype.__get__visibilityData
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VisibilityData'
      deprecated: false
    post:
      tags:
        - VisibilityData
      summary: Creates a new instance in visibilityData of this model.
      operationId: VisibilityData.prototype.__create__visibilityData
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - VisibilityData
      summary: Deletes all visibilityData of this model.
      operationId: VisibilityData.prototype.__delete__visibilityData
      parameters:
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/VisibilityData/{id}/visibilityData/count':
    get:
      tags:
        - VisibilityData
      summary: Counts visibilityData of VisibilityData.
      operationId: VisibilityData.prototype.__count__visibilityData
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /VisibilityData:
    post:
      tags:
        - VisibilityData
      summary: Create a new instance of the model and persist it into the data source.
      operationId: VisibilityData.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    patch:
      tags:
        - VisibilityData
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: VisibilityData.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    put:
      tags:
        - VisibilityData
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: VisibilityData.replaceOrCreate__put_VisibilityData
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    get:
      tags:
        - VisibilityData
      summary: Find all instances of the model matched by filter from the data source.
      operationId: VisibilityData.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VisibilityData'
      deprecated: false
  /VisibilityData/replaceOrCreate:
    post:
      tags:
        - VisibilityData
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: VisibilityData.replaceOrCreate__post_VisibilityData_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  /VisibilityData/upsertWithWhere:
    post:
      tags:
        - VisibilityData
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: VisibilityData.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/VisibilityData/{id}/exists':
    get:
      tags:
        - VisibilityData
      summary: Check whether a model instance exists in the data source.
      operationId: 'VisibilityData.exists__get_VisibilityData_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/VisibilityData/{id}':
    head:
      tags:
        - VisibilityData
      summary: Check whether a model instance exists in the data source.
      operationId: 'VisibilityData.exists__head_VisibilityData_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - VisibilityData
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: VisibilityData.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    put:
      tags:
        - VisibilityData
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'VisibilityData.replaceById__put_VisibilityData_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - VisibilityData
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: VisibilityData.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - VisibilityData
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: VisibilityData.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: VisibilityData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/VisibilityData/{id}/replace':
    post:
      tags:
        - VisibilityData
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'VisibilityData.replaceById__post_VisibilityData_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  /VisibilityData/findOne:
    get:
      tags:
        - VisibilityData
      summary: Find first instance of the model matched by filter from the data source.
      operationId: VisibilityData.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  /VisibilityData/update:
    post:
      tags:
        - VisibilityData
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: VisibilityData.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VisibilityData'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /VisibilityData/count:
    get:
      tags:
        - VisibilityData
      summary: Count instances of the model matched by where from the data source.
      operationId: VisibilityData.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ReportViews:
    post:
      tags:
        - ReportView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ReportView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
    patch:
      tags:
        - ReportView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ReportView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
    put:
      tags:
        - ReportView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ReportView.replaceOrCreate__put_ReportViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
    get:
      tags:
        - ReportView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ReportView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ReportView'
      deprecated: false
  /ReportViews/replaceOrCreate:
    post:
      tags:
        - ReportView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ReportView.replaceOrCreate__post_ReportViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
  /ReportViews/upsertWithWhere:
    post:
      tags:
        - ReportView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ReportView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
  '/ReportViews/{id}/exists':
    get:
      tags:
        - ReportView
      summary: Check whether a model instance exists in the data source.
      operationId: 'ReportView.exists__get_ReportViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ReportViews/{id}':
    head:
      tags:
        - ReportView
      summary: Check whether a model instance exists in the data source.
      operationId: 'ReportView.exists__head_ReportViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ReportView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ReportView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
    put:
      tags:
        - ReportView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ReportView.replaceById__put_ReportViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
    delete:
      tags:
        - ReportView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ReportView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ReportView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ReportView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ReportView'
        - name: id
          in: path
          description: ReportView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
  '/ReportViews/{id}/replace':
    post:
      tags:
        - ReportView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ReportView.replaceById__post_ReportViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
  /ReportViews/findOne:
    get:
      tags:
        - ReportView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ReportView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ReportView'
      deprecated: false
  /ReportViews/update:
    post:
      tags:
        - ReportView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ReportView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ReportView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ReportViews/count:
    get:
      tags:
        - ReportView
      summary: Count instances of the model matched by where from the data source.
      operationId: ReportView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Visibilities:
    post:
      tags:
        - Visibility
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Visibility.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
    patch:
      tags:
        - Visibility
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Visibility.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
    put:
      tags:
        - Visibility
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Visibility.replaceOrCreate__put_Visibilities
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
    get:
      tags:
        - Visibility
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Visibility.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Visibility'
      deprecated: false
  /Visibilities/replaceOrCreate:
    post:
      tags:
        - Visibility
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Visibility.replaceOrCreate__post_Visibilities_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
  /Visibilities/upsertWithWhere:
    post:
      tags:
        - Visibility
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Visibility.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
  '/Visibilities/{id}/exists':
    get:
      tags:
        - Visibility
      summary: Check whether a model instance exists in the data source.
      operationId: 'Visibility.exists__get_Visibilities_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Visibilities/{id}':
    head:
      tags:
        - Visibility
      summary: Check whether a model instance exists in the data source.
      operationId: 'Visibility.exists__head_Visibilities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Visibility
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Visibility.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
    put:
      tags:
        - Visibility
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Visibility.replaceById__put_Visibilities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
    delete:
      tags:
        - Visibility
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Visibility.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Visibility
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Visibility.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visibility'
        - name: id
          in: path
          description: Visibility id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
  '/Visibilities/{id}/replace':
    post:
      tags:
        - Visibility
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Visibility.replaceById__post_Visibilities_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
  /Visibilities/findOne:
    get:
      tags:
        - Visibility
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Visibility.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visibility'
      deprecated: false
  /Visibilities/update:
    post:
      tags:
        - Visibility
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Visibility.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visibility'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Visibilities/count:
    get:
      tags:
        - Visibility
      summary: Count instances of the model matched by where from the data source.
      operationId: Visibility.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/ChatDetails/{id}/members':
    get:
      tags:
        - ChatDetail
      summary: Fetches belongsTo relation members.
      operationId: ChatDetail.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ChatDetail id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/ChatDetails/{id}/matches':
    get:
      tags:
        - ChatDetail
      summary: Fetches belongsTo relation matches.
      operationId: ChatDetail.prototype.__get__matches
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ChatDetail id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Matches'
      deprecated: false
  /ChatDetails:
    post:
      tags:
        - ChatDetail
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ChatDetail.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    patch:
      tags:
        - ChatDetail
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ChatDetail.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    put:
      tags:
        - ChatDetail
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ChatDetail.replaceOrCreate__put_ChatDetails
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    get:
      tags:
        - ChatDetail
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ChatDetail.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatDetail'
      deprecated: false
  /ChatDetails/replaceOrCreate:
    post:
      tags:
        - ChatDetail
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ChatDetail.replaceOrCreate__post_ChatDetails_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  /ChatDetails/upsertWithWhere:
    post:
      tags:
        - ChatDetail
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ChatDetail.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  '/ChatDetails/{id}/exists':
    get:
      tags:
        - ChatDetail
      summary: Check whether a model instance exists in the data source.
      operationId: 'ChatDetail.exists__get_ChatDetails_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ChatDetails/{id}':
    head:
      tags:
        - ChatDetail
      summary: Check whether a model instance exists in the data source.
      operationId: 'ChatDetail.exists__head_ChatDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ChatDetail
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ChatDetail.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    put:
      tags:
        - ChatDetail
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ChatDetail.replaceById__put_ChatDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - ChatDetail
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ChatDetail.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ChatDetail
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ChatDetail.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: ChatDetail id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  '/ChatDetails/{id}/replace':
    post:
      tags:
        - ChatDetail
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ChatDetail.replaceById__post_ChatDetails_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  /ChatDetails/findOne:
    get:
      tags:
        - ChatDetail
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ChatDetail.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  /ChatDetails/update:
    post:
      tags:
        - ChatDetail
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ChatDetail.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ChatDetails/count:
    get:
      tags:
        - ChatDetail
      summary: Count instances of the model matched by where from the data source.
      operationId: ChatDetail.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ChatDetails/createChat:
    post:
      tags:
        - ChatDetail
      operationId: ChatDetail.createChat
      parameters:
        - name: param
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /ChatDetails/getChatDetail:
    get:
      tags:
        - ChatDetail
      operationId: ChatDetail.getChatDetail
      parameters:
        - name: matchId
          in: query
          required: true
          type: number
          format: double
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ChatDetails/sendChat:
    post:
      tags:
        - ChatDetail
      operationId: ChatDetail.sendChat
      parameters:
        - name: matchId
          in: formData
          required: true
          type: number
          format: double
        - name: message
          in: formData
          required: true
          type: string
        - name: type
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ChatDetails/setRead:
    post:
      tags:
        - ChatDetail
      operationId: ChatDetail.setRead
      parameters:
        - name: matchId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /AppInfos:
    post:
      tags:
        - AppInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AppInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
    patch:
      tags:
        - AppInfo
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AppInfo.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
    put:
      tags:
        - AppInfo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AppInfo.replaceOrCreate__put_AppInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
    get:
      tags:
        - AppInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AppInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AppInfo'
      deprecated: false
  /AppInfos/replaceOrCreate:
    post:
      tags:
        - AppInfo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AppInfo.replaceOrCreate__post_AppInfos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
  /AppInfos/upsertWithWhere:
    post:
      tags:
        - AppInfo
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AppInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
  '/AppInfos/{id}/exists':
    get:
      tags:
        - AppInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppInfo.exists__get_AppInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AppInfos/{id}':
    head:
      tags:
        - AppInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'AppInfo.exists__head_AppInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AppInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AppInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
    put:
      tags:
        - AppInfo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AppInfo.replaceById__put_AppInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
    delete:
      tags:
        - AppInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AppInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AppInfo
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AppInfo.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AppInfo'
        - name: id
          in: path
          description: AppInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
  '/AppInfos/{id}/replace':
    post:
      tags:
        - AppInfo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AppInfo.replaceById__post_AppInfos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
  /AppInfos/findOne:
    get:
      tags:
        - AppInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AppInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AppInfo'
      deprecated: false
  /AppInfos/update:
    post:
      tags:
        - AppInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AppInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AppInfos/count:
    get:
      tags:
        - AppInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: AppInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AppInfos/getLatestVersion:
    get:
      tags:
        - AppInfo
      summary: Get Latest Version of Flutter Asia by Platform
      operationId: AppInfo.getLatestVersion
      parameters:
        - name: platform
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: string
      deprecated: false
  /AppInfos/addVersion:
    post:
      tags:
        - AppInfo
      summary: Add Latest Version of Flutter Asia by Platform
      operationId: AppInfo.addVersion
      parameters:
        - name: platform
          in: formData
          required: false
          type: string
        - name: version
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ChatHides:
    post:
      tags:
        - ChatHide
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ChatHide.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
    patch:
      tags:
        - ChatHide
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ChatHide.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
    put:
      tags:
        - ChatHide
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ChatHide.replaceOrCreate__put_ChatHides
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
    get:
      tags:
        - ChatHide
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ChatHide.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatHide'
      deprecated: false
  /ChatHides/replaceOrCreate:
    post:
      tags:
        - ChatHide
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ChatHide.replaceOrCreate__post_ChatHides_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
  /ChatHides/upsertWithWhere:
    post:
      tags:
        - ChatHide
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ChatHide.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
  '/ChatHides/{id}/exists':
    get:
      tags:
        - ChatHide
      summary: Check whether a model instance exists in the data source.
      operationId: 'ChatHide.exists__get_ChatHides_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ChatHides/{id}':
    head:
      tags:
        - ChatHide
      summary: Check whether a model instance exists in the data source.
      operationId: 'ChatHide.exists__head_ChatHides_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ChatHide
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ChatHide.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
    put:
      tags:
        - ChatHide
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ChatHide.replaceById__put_ChatHides_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
    delete:
      tags:
        - ChatHide
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ChatHide.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ChatHide
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ChatHide.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ChatHide'
        - name: id
          in: path
          description: ChatHide id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
  '/ChatHides/{id}/replace':
    post:
      tags:
        - ChatHide
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ChatHide.replaceById__post_ChatHides_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
  /ChatHides/findOne:
    get:
      tags:
        - ChatHide
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ChatHide.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatHide'
      deprecated: false
  /ChatHides/update:
    post:
      tags:
        - ChatHide
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ChatHide.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ChatHide'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ChatHides/count:
    get:
      tags:
        - ChatHide
      summary: Count instances of the model matched by where from the data source.
      operationId: ChatHide.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ChatHides/unhide:
    post:
      tags:
        - ChatHide
      operationId: ChatHide.unhide
      parameters:
        - name: memberId
          in: formData
          required: true
          type: number
          format: double
        - name: matchId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ChatHides/hide:
    post:
      tags:
        - ChatHide
      operationId: ChatHide.hide
      parameters:
        - name: matchId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Feedbacks/{id}/members':
    get:
      tags:
        - Feedback
      summary: Fetches belongsTo relation members.
      operationId: Feedback.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Feedback id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /Feedbacks:
    post:
      tags:
        - Feedback
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Feedback.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    patch:
      tags:
        - Feedback
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Feedback.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    put:
      tags:
        - Feedback
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Feedback.replaceOrCreate__put_Feedbacks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    get:
      tags:
        - Feedback
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Feedback.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/replaceOrCreate:
    post:
      tags:
        - Feedback
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Feedback.replaceOrCreate__post_Feedbacks_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/upsertWithWhere:
    post:
      tags:
        - Feedback
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Feedback.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  '/Feedbacks/{id}/exists':
    get:
      tags:
        - Feedback
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feedback.exists__get_Feedbacks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Feedbacks/{id}':
    head:
      tags:
        - Feedback
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feedback.exists__head_Feedbacks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Feedback
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Feedback.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    put:
      tags:
        - Feedback
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Feedback.replaceById__put_Feedbacks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
    delete:
      tags:
        - Feedback
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Feedback.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Feedback
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Feedback.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feedback'
        - name: id
          in: path
          description: Feedback id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  '/Feedbacks/{id}/replace':
    post:
      tags:
        - Feedback
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Feedback.replaceById__post_Feedbacks_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/findOne:
    get:
      tags:
        - Feedback
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Feedback.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feedback'
      deprecated: false
  /Feedbacks/update:
    post:
      tags:
        - Feedback
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Feedback.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Feedbacks/count:
    get:
      tags:
        - Feedback
      summary: Count instances of the model matched by where from the data source.
      operationId: Feedback.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Feedbacks/addFeedback:
    post:
      tags:
        - Feedback
      summary: Add Feedback From User
      operationId: Feedback.addFeedback
      parameters:
        - name: message
          in: formData
          required: true
          type: string
        - name: appVersion
          in: formData
          required: true
          type: string
        - name: appPlatform
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Feedbacks/isUserNeedFeedback:
    get:
      tags:
        - Feedback
      summary: Check is User need send feedback
      operationId: Feedback.isUserNeedFeedback
      parameters:
        - name: appPlatform
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Feedbacks/getPlatformList:
    get:
      tags:
        - Feedback
      operationId: Feedback.getPlatformList
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /FeedbackChoices:
    post:
      tags:
        - FeedbackChoice
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FeedbackChoice.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    patch:
      tags:
        - FeedbackChoice
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: FeedbackChoice.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    put:
      tags:
        - FeedbackChoice
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackChoice.replaceOrCreate__put_FeedbackChoices
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    get:
      tags:
        - FeedbackChoice
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FeedbackChoice.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  /FeedbackChoices/replaceOrCreate:
    post:
      tags:
        - FeedbackChoice
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackChoice.replaceOrCreate__post_FeedbackChoices_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  /FeedbackChoices/upsertWithWhere:
    post:
      tags:
        - FeedbackChoice
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: FeedbackChoice.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  '/FeedbackChoices/{id}/exists':
    get:
      tags:
        - FeedbackChoice
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackChoice.exists__get_FeedbackChoices_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FeedbackChoices/{id}':
    head:
      tags:
        - FeedbackChoice
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackChoice.exists__head_FeedbackChoices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FeedbackChoice
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FeedbackChoice.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    put:
      tags:
        - FeedbackChoice
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackChoice.replaceById__put_FeedbackChoices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    delete:
      tags:
        - FeedbackChoice
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FeedbackChoice.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FeedbackChoice
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: FeedbackChoice.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackChoice'
        - name: id
          in: path
          description: FeedbackChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  '/FeedbackChoices/{id}/replace':
    post:
      tags:
        - FeedbackChoice
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackChoice.replaceById__post_FeedbackChoices_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  /FeedbackChoices/findOne:
    get:
      tags:
        - FeedbackChoice
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FeedbackChoice.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  /FeedbackChoices/update:
    post:
      tags:
        - FeedbackChoice
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FeedbackChoice.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FeedbackChoices/count:
    get:
      tags:
        - FeedbackChoice
      summary: Count instances of the model matched by where from the data source.
      operationId: FeedbackChoice.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/FeedbackMemberAnswers/{id}/feedbackQuestionTypeChoice':
    get:
      tags:
        - FeedbackMemberAnswer
      summary: Fetches belongsTo relation feedbackQuestionTypeChoice.
      operationId: FeedbackMemberAnswer.prototype.__get__feedbackQuestionTypeChoice
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: FeedbackMemberAnswer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  /FeedbackMemberAnswers:
    post:
      tags:
        - FeedbackMemberAnswer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FeedbackMemberAnswer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    patch:
      tags:
        - FeedbackMemberAnswer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: FeedbackMemberAnswer.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    put:
      tags:
        - FeedbackMemberAnswer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackMemberAnswer.replaceOrCreate__put_FeedbackMemberAnswers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    get:
      tags:
        - FeedbackMemberAnswer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FeedbackMemberAnswer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  /FeedbackMemberAnswers/replaceOrCreate:
    post:
      tags:
        - FeedbackMemberAnswer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackMemberAnswer.replaceOrCreate__post_FeedbackMemberAnswers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  /FeedbackMemberAnswers/upsertWithWhere:
    post:
      tags:
        - FeedbackMemberAnswer
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: FeedbackMemberAnswer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  '/FeedbackMemberAnswers/{id}/exists':
    get:
      tags:
        - FeedbackMemberAnswer
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackMemberAnswer.exists__get_FeedbackMemberAnswers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FeedbackMemberAnswers/{id}':
    head:
      tags:
        - FeedbackMemberAnswer
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackMemberAnswer.exists__head_FeedbackMemberAnswers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FeedbackMemberAnswer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FeedbackMemberAnswer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    put:
      tags:
        - FeedbackMemberAnswer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackMemberAnswer.replaceById__put_FeedbackMemberAnswers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    delete:
      tags:
        - FeedbackMemberAnswer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FeedbackMemberAnswer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FeedbackMemberAnswer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: FeedbackMemberAnswer.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackMemberAnswer'
        - name: id
          in: path
          description: FeedbackMemberAnswer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  '/FeedbackMemberAnswers/{id}/replace':
    post:
      tags:
        - FeedbackMemberAnswer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackMemberAnswer.replaceById__post_FeedbackMemberAnswers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  /FeedbackMemberAnswers/findOne:
    get:
      tags:
        - FeedbackMemberAnswer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FeedbackMemberAnswer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  /FeedbackMemberAnswers/update:
    post:
      tags:
        - FeedbackMemberAnswer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FeedbackMemberAnswer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackMemberAnswer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FeedbackMemberAnswers/count:
    get:
      tags:
        - FeedbackMemberAnswer
      summary: Count instances of the model matched by where from the data source.
      operationId: FeedbackMemberAnswer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FeedbackMemberAnswers/addAnswer:
    post:
      tags:
        - FeedbackMemberAnswer
      operationId: FeedbackMemberAnswer.addAnswer
      parameters:
        - name: answer
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /FeedbackMemberAnswers/getSummary:
    get:
      tags:
        - FeedbackMemberAnswer
      operationId: FeedbackMemberAnswer.getSummary
      parameters:
        - name: startDate
          in: query
          required: true
          type: string
          format: date-time
        - name: endDate
          in: query
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /FeedbackMemberAnswers/getComment:
    get:
      tags:
        - FeedbackMemberAnswer
      operationId: FeedbackMemberAnswer.getComment
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
        - name: platforms
          in: query
          required: true
          type: string
          format: JSON
        - name: versions
          in: query
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackChoices/{fk}':
    get:
      tags:
        - FeedbackQuestion
      summary: Find a related item by id for feedbackChoices.
      operationId: FeedbackQuestion.prototype.__findById__feedbackChoices
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackChoices
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: Delete a related item by id for feedbackChoices.
      operationId: FeedbackQuestion.prototype.__destroyById__feedbackChoices
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackChoices
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - FeedbackQuestion
      summary: Update a related item by id for feedbackChoices.
      operationId: FeedbackQuestion.prototype.__updateById__feedbackChoices
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackChoices
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackChoice'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackChoices/rel/{fk}':
    put:
      tags:
        - FeedbackQuestion
      summary: Add a related item by id for feedbackChoices.
      operationId: FeedbackQuestion.prototype.__link__feedbackChoices
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackChoices
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: Remove the feedbackChoices relation to an item by id.
      operationId: FeedbackQuestion.prototype.__unlink__feedbackChoices
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackChoices
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - FeedbackQuestion
      summary: Check the existence of feedbackChoices relation to an item by id.
      operationId: FeedbackQuestion.prototype.__exists__feedbackChoices
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackChoices
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackTypes/{fk}':
    get:
      tags:
        - FeedbackQuestion
      summary: Find a related item by id for feedbackTypes.
      operationId: FeedbackQuestion.prototype.__findById__feedbackTypes
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackTypes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: Delete a related item by id for feedbackTypes.
      operationId: FeedbackQuestion.prototype.__destroyById__feedbackTypes
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackTypes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - FeedbackQuestion
      summary: Update a related item by id for feedbackTypes.
      operationId: FeedbackQuestion.prototype.__updateById__feedbackTypes
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackTypes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackType'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackTypes/rel/{fk}':
    put:
      tags:
        - FeedbackQuestion
      summary: Add a related item by id for feedbackTypes.
      operationId: FeedbackQuestion.prototype.__link__feedbackTypes
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackTypes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: Remove the feedbackTypes relation to an item by id.
      operationId: FeedbackQuestion.prototype.__unlink__feedbackTypes
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackTypes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - FeedbackQuestion
      summary: Check the existence of feedbackTypes relation to an item by id.
      operationId: FeedbackQuestion.prototype.__exists__feedbackTypes
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackTypes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackChoices':
    get:
      tags:
        - FeedbackQuestion
      summary: Queries feedbackChoices of FeedbackQuestion.
      operationId: FeedbackQuestion.prototype.__get__feedbackChoices
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    post:
      tags:
        - FeedbackQuestion
      summary: Creates a new instance in feedbackChoices of this model.
      operationId: FeedbackQuestion.prototype.__create__feedbackChoices
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackChoice'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: Deletes all feedbackChoices of this model.
      operationId: FeedbackQuestion.prototype.__delete__feedbackChoices
      parameters:
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackChoices/count':
    get:
      tags:
        - FeedbackQuestion
      summary: Counts feedbackChoices of FeedbackQuestion.
      operationId: FeedbackQuestion.prototype.__count__feedbackChoices
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackTypes':
    get:
      tags:
        - FeedbackQuestion
      summary: Queries feedbackTypes of FeedbackQuestion.
      operationId: FeedbackQuestion.prototype.__get__feedbackTypes
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackType'
      deprecated: false
    post:
      tags:
        - FeedbackQuestion
      summary: Creates a new instance in feedbackTypes of this model.
      operationId: FeedbackQuestion.prototype.__create__feedbackTypes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackType'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: Deletes all feedbackTypes of this model.
      operationId: FeedbackQuestion.prototype.__delete__feedbackTypes
      parameters:
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/FeedbackQuestions/{id}/feedbackTypes/count':
    get:
      tags:
        - FeedbackQuestion
      summary: Counts feedbackTypes of FeedbackQuestion.
      operationId: FeedbackQuestion.prototype.__count__feedbackTypes
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FeedbackQuestions:
    post:
      tags:
        - FeedbackQuestion
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FeedbackQuestion.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
    patch:
      tags:
        - FeedbackQuestion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: FeedbackQuestion.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
    put:
      tags:
        - FeedbackQuestion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackQuestion.replaceOrCreate__put_FeedbackQuestions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
    get:
      tags:
        - FeedbackQuestion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FeedbackQuestion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  /FeedbackQuestions/replaceOrCreate:
    post:
      tags:
        - FeedbackQuestion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackQuestion.replaceOrCreate__post_FeedbackQuestions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  /FeedbackQuestions/upsertWithWhere:
    post:
      tags:
        - FeedbackQuestion
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: FeedbackQuestion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  '/FeedbackQuestions/{id}/exists':
    get:
      tags:
        - FeedbackQuestion
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackQuestion.exists__get_FeedbackQuestions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FeedbackQuestions/{id}':
    head:
      tags:
        - FeedbackQuestion
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackQuestion.exists__head_FeedbackQuestions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FeedbackQuestion
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FeedbackQuestion.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
    put:
      tags:
        - FeedbackQuestion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackQuestion.replaceById__put_FeedbackQuestions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestion
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FeedbackQuestion.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FeedbackQuestion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: FeedbackQuestion.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackQuestion'
        - name: id
          in: path
          description: FeedbackQuestion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  '/FeedbackQuestions/{id}/replace':
    post:
      tags:
        - FeedbackQuestion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackQuestion.replaceById__post_FeedbackQuestions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  /FeedbackQuestions/findOne:
    get:
      tags:
        - FeedbackQuestion
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FeedbackQuestion.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  /FeedbackQuestions/update:
    post:
      tags:
        - FeedbackQuestion
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FeedbackQuestion.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackQuestion'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FeedbackQuestions/count:
    get:
      tags:
        - FeedbackQuestion
      summary: Count instances of the model matched by where from the data source.
      operationId: FeedbackQuestion.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FeedbackQuestions/addQuestion:
    post:
      tags:
        - FeedbackQuestion
      operationId: FeedbackQuestion.addQuestion
      parameters:
        - name: question
          in: formData
          required: true
          type: string
        - name: type
          in: formData
          required: true
          type: string
        - name: choices
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /FeedbackQuestions/getQuestionList:
    get:
      tags:
        - FeedbackQuestion
      operationId: FeedbackQuestion.getQuestionList
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /FeedbackTypes:
    post:
      tags:
        - FeedbackType
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FeedbackType.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    patch:
      tags:
        - FeedbackType
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: FeedbackType.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    put:
      tags:
        - FeedbackType
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackType.replaceOrCreate__put_FeedbackTypes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    get:
      tags:
        - FeedbackType
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FeedbackType.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackType'
      deprecated: false
  /FeedbackTypes/replaceOrCreate:
    post:
      tags:
        - FeedbackType
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackType.replaceOrCreate__post_FeedbackTypes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
  /FeedbackTypes/upsertWithWhere:
    post:
      tags:
        - FeedbackType
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: FeedbackType.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
  '/FeedbackTypes/{id}/exists':
    get:
      tags:
        - FeedbackType
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackType.exists__get_FeedbackTypes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FeedbackTypes/{id}':
    head:
      tags:
        - FeedbackType
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackType.exists__head_FeedbackTypes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FeedbackType
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FeedbackType.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    put:
      tags:
        - FeedbackType
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackType.replaceById__put_FeedbackTypes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
    delete:
      tags:
        - FeedbackType
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FeedbackType.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FeedbackType
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: FeedbackType.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackType'
        - name: id
          in: path
          description: FeedbackType id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
  '/FeedbackTypes/{id}/replace':
    post:
      tags:
        - FeedbackType
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackType.replaceById__post_FeedbackTypes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
  /FeedbackTypes/findOne:
    get:
      tags:
        - FeedbackType
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FeedbackType.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackType'
      deprecated: false
  /FeedbackTypes/update:
    post:
      tags:
        - FeedbackType
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FeedbackType.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackType'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FeedbackTypes/count:
    get:
      tags:
        - FeedbackType
      summary: Count instances of the model matched by where from the data source.
      operationId: FeedbackType.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/feedbackQuestion':
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Fetches belongsTo relation feedbackQuestion.
      operationId: FeedbackQuestionTypeChoice.prototype.__get__feedbackQuestion
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestion'
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/feedbackChoice':
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Fetches belongsTo relation feedbackChoice.
      operationId: FeedbackQuestionTypeChoice.prototype.__get__feedbackChoice
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackChoice'
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/feedbackMemberAnswers/{fk}':
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Find a related item by id for feedbackMemberAnswers.
      operationId: FeedbackQuestionTypeChoice.prototype.__findById__feedbackMemberAnswers
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackMemberAnswers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Delete a related item by id for feedbackMemberAnswers.
      operationId: FeedbackQuestionTypeChoice.prototype.__destroyById__feedbackMemberAnswers
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackMemberAnswers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Update a related item by id for feedbackMemberAnswers.
      operationId: FeedbackQuestionTypeChoice.prototype.__updateById__feedbackMemberAnswers
      parameters:
        - name: fk
          in: path
          description: Foreign key for feedbackMemberAnswers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/feedbackMemberAnswers':
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Queries feedbackMemberAnswers of FeedbackQuestionTypeChoice.
      operationId: FeedbackQuestionTypeChoice.prototype.__get__feedbackMemberAnswers
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    post:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Creates a new instance in feedbackMemberAnswers of this model.
      operationId: FeedbackQuestionTypeChoice.prototype.__create__feedbackMemberAnswers
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackMemberAnswer'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Deletes all feedbackMemberAnswers of this model.
      operationId: FeedbackQuestionTypeChoice.prototype.__delete__feedbackMemberAnswers
      parameters:
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/feedbackMemberAnswers/count':
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Counts feedbackMemberAnswers of FeedbackQuestionTypeChoice.
      operationId: FeedbackQuestionTypeChoice.prototype.__count__feedbackMemberAnswers
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FeedbackQuestionTypeChoices:
    post:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FeedbackQuestionTypeChoice.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    patch:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: FeedbackQuestionTypeChoice.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    put:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackQuestionTypeChoice.replaceOrCreate__put_FeedbackQuestionTypeChoices
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FeedbackQuestionTypeChoice.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  /FeedbackQuestionTypeChoices/replaceOrCreate:
    post:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FeedbackQuestionTypeChoice.replaceOrCreate__post_FeedbackQuestionTypeChoices_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  /FeedbackQuestionTypeChoices/upsertWithWhere:
    post:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: FeedbackQuestionTypeChoice.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/exists':
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackQuestionTypeChoice.exists__get_FeedbackQuestionTypeChoices_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}':
    head:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Check whether a model instance exists in the data source.
      operationId: 'FeedbackQuestionTypeChoice.exists__head_FeedbackQuestionTypeChoices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FeedbackQuestionTypeChoice.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    put:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackQuestionTypeChoice.replaceById__put_FeedbackQuestionTypeChoices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
    delete:
      tags:
        - FeedbackQuestionTypeChoice
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FeedbackQuestionTypeChoice.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: FeedbackQuestionTypeChoice.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
        - name: id
          in: path
          description: FeedbackQuestionTypeChoice id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  '/FeedbackQuestionTypeChoices/{id}/replace':
    post:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FeedbackQuestionTypeChoice.replaceById__post_FeedbackQuestionTypeChoices_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  /FeedbackQuestionTypeChoices/findOne:
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FeedbackQuestionTypeChoice.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      deprecated: false
  /FeedbackQuestionTypeChoices/update:
    post:
      tags:
        - FeedbackQuestionTypeChoice
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FeedbackQuestionTypeChoice.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FeedbackQuestionTypeChoice'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FeedbackQuestionTypeChoices/count:
    get:
      tags:
        - FeedbackQuestionTypeChoice
      summary: Count instances of the model matched by where from the data source.
      operationId: FeedbackQuestionTypeChoice.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /InactiveReasons:
    post:
      tags:
        - InactiveReason
      summary: Create a new instance of the model and persist it into the data source.
      operationId: InactiveReason.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
    patch:
      tags:
        - InactiveReason
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: InactiveReason.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
    put:
      tags:
        - InactiveReason
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: InactiveReason.replaceOrCreate__put_InactiveReasons
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
    get:
      tags:
        - InactiveReason
      summary: Find all instances of the model matched by filter from the data source.
      operationId: InactiveReason.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/InactiveReason'
      deprecated: false
  /InactiveReasons/replaceOrCreate:
    post:
      tags:
        - InactiveReason
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: InactiveReason.replaceOrCreate__post_InactiveReasons_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
  /InactiveReasons/upsertWithWhere:
    post:
      tags:
        - InactiveReason
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: InactiveReason.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
  '/InactiveReasons/{id}/exists':
    get:
      tags:
        - InactiveReason
      summary: Check whether a model instance exists in the data source.
      operationId: 'InactiveReason.exists__get_InactiveReasons_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/InactiveReasons/{id}':
    head:
      tags:
        - InactiveReason
      summary: Check whether a model instance exists in the data source.
      operationId: 'InactiveReason.exists__head_InactiveReasons_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - InactiveReason
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: InactiveReason.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
    put:
      tags:
        - InactiveReason
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'InactiveReason.replaceById__put_InactiveReasons_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
    delete:
      tags:
        - InactiveReason
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: InactiveReason.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - InactiveReason
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: InactiveReason.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/InactiveReason'
        - name: id
          in: path
          description: InactiveReason id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
  '/InactiveReasons/{id}/replace':
    post:
      tags:
        - InactiveReason
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'InactiveReason.replaceById__post_InactiveReasons_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
  /InactiveReasons/findOne:
    get:
      tags:
        - InactiveReason
      summary: Find first instance of the model matched by filter from the data source.
      operationId: InactiveReason.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/InactiveReason'
      deprecated: false
  /InactiveReasons/update:
    post:
      tags:
        - InactiveReason
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: InactiveReason.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/InactiveReason'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /InactiveReasons/count:
    get:
      tags:
        - InactiveReason
      summary: Count instances of the model matched by where from the data source.
      operationId: InactiveReason.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Blocks/{id}/members':
    get:
      tags:
        - Block
      summary: Fetches belongsTo relation members.
      operationId: Block.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/Blocks/{id}/memberPhotos':
    get:
      tags:
        - Block
      summary: Fetches hasOne relation memberPhotos.
      operationId: Block.prototype.__get__memberPhotos
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    post:
      tags:
        - Block
      summary: Creates a new instance in memberPhotos of this model.
      operationId: Block.prototype.__create__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - Block
      summary: Update memberPhotos of this model.
      operationId: Block.prototype.__update__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - Block
      summary: Deletes memberPhotos of this model.
      operationId: Block.prototype.__destroy__memberPhotos
      parameters:
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Blocks/{id}/blockedBy':
    get:
      tags:
        - Block
      summary: Fetches hasOne relation blockedBy.
      operationId: Block.prototype.__get__blockedBy
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    post:
      tags:
        - Block
      summary: Creates a new instance in blockedBy of this model.
      operationId: Block.prototype.__create__blockedBy
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - Block
      summary: Update blockedBy of this model.
      operationId: Block.prototype.__update__blockedBy
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - Block
      summary: Deletes blockedBy of this model.
      operationId: Block.prototype.__destroy__blockedBy
      parameters:
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Blocks:
    post:
      tags:
        - Block
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Block.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    patch:
      tags:
        - Block
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Block.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    put:
      tags:
        - Block
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Block.replaceOrCreate__put_Blocks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    get:
      tags:
        - Block
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Block.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/replaceOrCreate:
    post:
      tags:
        - Block
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Block.replaceOrCreate__post_Blocks_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/upsertWithWhere:
    post:
      tags:
        - Block
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Block.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  '/Blocks/{id}/exists':
    get:
      tags:
        - Block
      summary: Check whether a model instance exists in the data source.
      operationId: 'Block.exists__get_Blocks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Blocks/{id}':
    head:
      tags:
        - Block
      summary: Check whether a model instance exists in the data source.
      operationId: 'Block.exists__head_Blocks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Block
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Block.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    put:
      tags:
        - Block
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Block.replaceById__put_Blocks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    delete:
      tags:
        - Block
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Block.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Block
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Block.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Block'
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  '/Blocks/{id}/replace':
    post:
      tags:
        - Block
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Block.replaceById__post_Blocks_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/findOne:
    get:
      tags:
        - Block
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Block.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/update:
    post:
      tags:
        - Block
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Block.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Blocks/count:
    get:
      tags:
        - Block
      summary: Count instances of the model matched by where from the data source.
      operationId: Block.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Blocks/addBlock:
    post:
      tags:
        - Block
      operationId: Block.addBlock
      parameters:
        - name: targetId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Blocks/getBlockList:
    get:
      tags:
        - Block
      operationId: Block.getBlockList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Blocks/removeBlock:
    post:
      tags:
        - Block
      operationId: Block.removeBlock
      parameters:
        - name: targetId
          in: formData
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Blocks/getAdminBlockList:
    get:
      tags:
        - Block
      operationId: Block.getAdminBlockList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Blocks/search:
    post:
      tags:
        - Block
      operationId: Block.search
      parameters:
        - name: search
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/AdminChatRooms/{id}/members/{fk}':
    get:
      tags:
        - AdminChatRoom
      summary: Find a related item by id for members.
      operationId: AdminChatRoom.prototype.__findById__members
      parameters:
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Delete a related item by id for members.
      operationId: AdminChatRoom.prototype.__destroyById__members
      parameters:
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - AdminChatRoom
      summary: Update a related item by id for members.
      operationId: AdminChatRoom.prototype.__updateById__members
      parameters:
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/AdminChatRooms/{id}/members/rel/{fk}':
    put:
      tags:
        - AdminChatRoom
      summary: Add a related item by id for members.
      operationId: AdminChatRoom.prototype.__link__members
      parameters:
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AdminChatMember'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Remove the members relation to an item by id.
      operationId: AdminChatRoom.prototype.__unlink__members
      parameters:
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - AdminChatRoom
      summary: Check the existence of members relation to an item by id.
      operationId: AdminChatRoom.prototype.__exists__members
      parameters:
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/AdminChatRooms/{id}/adminChatMembers/{fk}':
    get:
      tags:
        - AdminChatRoom
      summary: Find a related item by id for adminChatMembers.
      operationId: AdminChatRoom.prototype.__findById__adminChatMembers
      parameters:
        - name: fk
          in: path
          description: Foreign key for adminChatMembers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Delete a related item by id for adminChatMembers.
      operationId: AdminChatRoom.prototype.__destroyById__adminChatMembers
      parameters:
        - name: fk
          in: path
          description: Foreign key for adminChatMembers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - AdminChatRoom
      summary: Update a related item by id for adminChatMembers.
      operationId: AdminChatRoom.prototype.__updateById__adminChatMembers
      parameters:
        - name: fk
          in: path
          description: Foreign key for adminChatMembers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AdminChatMember'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
  '/AdminChatRooms/{id}/adminChatDetails/{fk}':
    get:
      tags:
        - AdminChatRoom
      summary: Find a related item by id for adminChatDetails.
      operationId: AdminChatRoom.prototype.__findById__adminChatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for adminChatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Delete a related item by id for adminChatDetails.
      operationId: AdminChatRoom.prototype.__destroyById__adminChatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for adminChatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - AdminChatRoom
      summary: Update a related item by id for adminChatDetails.
      operationId: AdminChatRoom.prototype.__updateById__adminChatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for adminChatDetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AdminChatDetail'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  '/AdminChatRooms/{id}/members':
    get:
      tags:
        - AdminChatRoom
      summary: Queries members of AdminChatRoom.
      operationId: AdminChatRoom.prototype.__get__members
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Members'
      deprecated: false
    post:
      tags:
        - AdminChatRoom
      summary: Creates a new instance in members of this model.
      operationId: AdminChatRoom.prototype.__create__members
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Deletes all members of this model.
      operationId: AdminChatRoom.prototype.__delete__members
      parameters:
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AdminChatRooms/{id}/members/count':
    get:
      tags:
        - AdminChatRoom
      summary: Counts members of AdminChatRoom.
      operationId: AdminChatRoom.prototype.__count__members
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/AdminChatRooms/{id}/adminChatMembers':
    get:
      tags:
        - AdminChatRoom
      summary: Queries adminChatMembers of AdminChatRoom.
      operationId: AdminChatRoom.prototype.__get__adminChatMembers
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AdminChatMember'
      deprecated: false
    post:
      tags:
        - AdminChatRoom
      summary: Creates a new instance in adminChatMembers of this model.
      operationId: AdminChatRoom.prototype.__create__adminChatMembers
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AdminChatMember'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Deletes all adminChatMembers of this model.
      operationId: AdminChatRoom.prototype.__delete__adminChatMembers
      parameters:
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AdminChatRooms/{id}/adminChatMembers/count':
    get:
      tags:
        - AdminChatRoom
      summary: Counts adminChatMembers of AdminChatRoom.
      operationId: AdminChatRoom.prototype.__count__adminChatMembers
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/AdminChatRooms/{id}/adminChatDetails':
    get:
      tags:
        - AdminChatRoom
      summary: Queries adminChatDetails of AdminChatRoom.
      operationId: AdminChatRoom.prototype.__get__adminChatDetails
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    post:
      tags:
        - AdminChatRoom
      summary: Creates a new instance in adminChatDetails of this model.
      operationId: AdminChatRoom.prototype.__create__adminChatDetails
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AdminChatDetail'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: Deletes all adminChatDetails of this model.
      operationId: AdminChatRoom.prototype.__delete__adminChatDetails
      parameters:
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AdminChatRooms/{id}/adminChatDetails/count':
    get:
      tags:
        - AdminChatRoom
      summary: Counts adminChatDetails of AdminChatRoom.
      operationId: AdminChatRoom.prototype.__count__adminChatDetails
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AdminChatRooms:
    post:
      tags:
        - AdminChatRoom
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AdminChatRoom.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
    patch:
      tags:
        - AdminChatRoom
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AdminChatRoom.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
    put:
      tags:
        - AdminChatRoom
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminChatRoom.replaceOrCreate__put_AdminChatRooms
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
    get:
      tags:
        - AdminChatRoom
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AdminChatRoom.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  /AdminChatRooms/replaceOrCreate:
    post:
      tags:
        - AdminChatRoom
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminChatRoom.replaceOrCreate__post_AdminChatRooms_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  /AdminChatRooms/upsertWithWhere:
    post:
      tags:
        - AdminChatRoom
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AdminChatRoom.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  '/AdminChatRooms/{id}/exists':
    get:
      tags:
        - AdminChatRoom
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminChatRoom.exists__get_AdminChatRooms_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AdminChatRooms/{id}':
    head:
      tags:
        - AdminChatRoom
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminChatRoom.exists__head_AdminChatRooms_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AdminChatRoom
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AdminChatRoom.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
    put:
      tags:
        - AdminChatRoom
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminChatRoom.replaceById__put_AdminChatRooms_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
    delete:
      tags:
        - AdminChatRoom
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AdminChatRoom.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AdminChatRoom
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AdminChatRoom.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatRoom'
        - name: id
          in: path
          description: AdminChatRoom id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  '/AdminChatRooms/{id}/replace':
    post:
      tags:
        - AdminChatRoom
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminChatRoom.replaceById__post_AdminChatRooms_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  /AdminChatRooms/findOne:
    get:
      tags:
        - AdminChatRoom
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AdminChatRoom.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  /AdminChatRooms/update:
    post:
      tags:
        - AdminChatRoom
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AdminChatRoom.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatRoom'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AdminChatRooms/count:
    get:
      tags:
        - AdminChatRoom
      summary: Count instances of the model matched by where from the data source.
      operationId: AdminChatRoom.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AdminChatRooms/getRoomList:
    get:
      tags:
        - AdminChatRoom
      operationId: AdminChatRoom.getRoomList
      parameters:
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/AdminChatMembers/{id}/adminChatRoom':
    get:
      tags:
        - AdminChatMember
      summary: Fetches belongsTo relation adminChatRoom.
      operationId: AdminChatMember.prototype.__get__adminChatRoom
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminChatMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  '/AdminChatMembers/{id}/members':
    get:
      tags:
        - AdminChatMember
      summary: Fetches belongsTo relation members.
      operationId: AdminChatMember.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminChatMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /AdminChatMembers:
    post:
      tags:
        - AdminChatMember
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AdminChatMember.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    patch:
      tags:
        - AdminChatMember
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AdminChatMember.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    put:
      tags:
        - AdminChatMember
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminChatMember.replaceOrCreate__put_AdminChatMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    get:
      tags:
        - AdminChatMember
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AdminChatMember.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AdminChatMember'
      deprecated: false
  /AdminChatMembers/replaceOrCreate:
    post:
      tags:
        - AdminChatMember
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminChatMember.replaceOrCreate__post_AdminChatMembers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
  /AdminChatMembers/upsertWithWhere:
    post:
      tags:
        - AdminChatMember
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AdminChatMember.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
  '/AdminChatMembers/{id}/exists':
    get:
      tags:
        - AdminChatMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminChatMember.exists__get_AdminChatMembers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AdminChatMembers/{id}':
    head:
      tags:
        - AdminChatMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminChatMember.exists__head_AdminChatMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AdminChatMember
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AdminChatMember.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    put:
      tags:
        - AdminChatMember
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminChatMember.replaceById__put_AdminChatMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
    delete:
      tags:
        - AdminChatMember
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AdminChatMember.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AdminChatMember
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AdminChatMember.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatMember'
        - name: id
          in: path
          description: AdminChatMember id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
  '/AdminChatMembers/{id}/replace':
    post:
      tags:
        - AdminChatMember
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminChatMember.replaceById__post_AdminChatMembers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
  /AdminChatMembers/findOne:
    get:
      tags:
        - AdminChatMember
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AdminChatMember.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatMember'
      deprecated: false
  /AdminChatMembers/update:
    post:
      tags:
        - AdminChatMember
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AdminChatMember.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatMember'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AdminChatMembers/count:
    get:
      tags:
        - AdminChatMember
      summary: Count instances of the model matched by where from the data source.
      operationId: AdminChatMember.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AdminChatMembers/getChatRoomId:
    get:
      tags:
        - AdminChatMember
      operationId: AdminChatMember.getChatRoomId
      parameters:
        - name: memberId
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/AdminChatDetails/{id}/adminChatRoom':
    get:
      tags:
        - AdminChatDetail
      summary: Fetches belongsTo relation adminChatRoom.
      operationId: AdminChatDetail.prototype.__get__adminChatRoom
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminChatDetail id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatRoom'
      deprecated: false
  /AdminChatDetails:
    post:
      tags:
        - AdminChatDetail
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AdminChatDetail.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    patch:
      tags:
        - AdminChatDetail
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AdminChatDetail.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    put:
      tags:
        - AdminChatDetail
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminChatDetail.replaceOrCreate__put_AdminChatDetails
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    get:
      tags:
        - AdminChatDetail
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AdminChatDetail.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  /AdminChatDetails/replaceOrCreate:
    post:
      tags:
        - AdminChatDetail
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminChatDetail.replaceOrCreate__post_AdminChatDetails_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  /AdminChatDetails/upsertWithWhere:
    post:
      tags:
        - AdminChatDetail
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AdminChatDetail.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  '/AdminChatDetails/{id}/exists':
    get:
      tags:
        - AdminChatDetail
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminChatDetail.exists__get_AdminChatDetails_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AdminChatDetails/{id}':
    head:
      tags:
        - AdminChatDetail
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminChatDetail.exists__head_AdminChatDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AdminChatDetail
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AdminChatDetail.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    put:
      tags:
        - AdminChatDetail
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminChatDetail.replaceById__put_AdminChatDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
    delete:
      tags:
        - AdminChatDetail
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AdminChatDetail.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AdminChatDetail
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AdminChatDetail.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatDetail'
        - name: id
          in: path
          description: AdminChatDetail id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  '/AdminChatDetails/{id}/replace':
    post:
      tags:
        - AdminChatDetail
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminChatDetail.replaceById__post_AdminChatDetails_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  /AdminChatDetails/findOne:
    get:
      tags:
        - AdminChatDetail
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AdminChatDetail.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminChatDetail'
      deprecated: false
  /AdminChatDetails/update:
    post:
      tags:
        - AdminChatDetail
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AdminChatDetail.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminChatDetail'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AdminChatDetails/count:
    get:
      tags:
        - AdminChatDetail
      summary: Count instances of the model matched by where from the data source.
      operationId: AdminChatDetail.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AdminChatDetails/sendChat:
    post:
      tags:
        - AdminChatDetail
      operationId: AdminChatDetail.sendChat
      parameters:
        - name: recipientId
          in: formData
          required: false
          type: number
          format: double
        - name: chatRoomId
          in: formData
          required: false
          type: number
          format: double
        - name: chatType
          in: formData
          required: true
          type: string
        - name: chatContent
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /AdminChatDetails/getDetail:
    get:
      tags:
        - AdminChatDetail
      operationId: AdminChatDetail.getDetail
      parameters:
        - name: chatRoomId
          in: query
          required: true
          type: number
          format: double
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /MonthViewStatistics:
    post:
      tags:
        - MonthViewStatistic
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MonthViewStatistic.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
    patch:
      tags:
        - MonthViewStatistic
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: MonthViewStatistic.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
    put:
      tags:
        - MonthViewStatistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MonthViewStatistic.replaceOrCreate__put_MonthViewStatistics
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
    get:
      tags:
        - MonthViewStatistic
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MonthViewStatistic.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
  /MonthViewStatistics/replaceOrCreate:
    post:
      tags:
        - MonthViewStatistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: MonthViewStatistic.replaceOrCreate__post_MonthViewStatistics_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
  /MonthViewStatistics/upsertWithWhere:
    post:
      tags:
        - MonthViewStatistic
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: MonthViewStatistic.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
  '/MonthViewStatistics/{id}/exists':
    get:
      tags:
        - MonthViewStatistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'MonthViewStatistic.exists__get_MonthViewStatistics_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MonthViewStatistics/{id}':
    head:
      tags:
        - MonthViewStatistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'MonthViewStatistic.exists__head_MonthViewStatistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MonthViewStatistic
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MonthViewStatistic.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
    put:
      tags:
        - MonthViewStatistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MonthViewStatistic.replaceById__put_MonthViewStatistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
    delete:
      tags:
        - MonthViewStatistic
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MonthViewStatistic.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MonthViewStatistic
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: MonthViewStatistic.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MonthViewStatistic'
        - name: id
          in: path
          description: MonthViewStatistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
  '/MonthViewStatistics/{id}/replace':
    post:
      tags:
        - MonthViewStatistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'MonthViewStatistic.replaceById__post_MonthViewStatistics_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
  /MonthViewStatistics/findOne:
    get:
      tags:
        - MonthViewStatistic
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MonthViewStatistic.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MonthViewStatistic'
      deprecated: false
  /MonthViewStatistics/update:
    post:
      tags:
        - MonthViewStatistic
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MonthViewStatistic.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MonthViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MonthViewStatistics/count:
    get:
      tags:
        - MonthViewStatistic
      summary: Count instances of the model matched by where from the data source.
      operationId: MonthViewStatistic.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /WeekViewStatistics:
    post:
      tags:
        - WeekViewStatistic
      summary: Create a new instance of the model and persist it into the data source.
      operationId: WeekViewStatistic.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
    patch:
      tags:
        - WeekViewStatistic
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: WeekViewStatistic.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
    put:
      tags:
        - WeekViewStatistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: WeekViewStatistic.replaceOrCreate__put_WeekViewStatistics
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
    get:
      tags:
        - WeekViewStatistic
      summary: Find all instances of the model matched by filter from the data source.
      operationId: WeekViewStatistic.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
  /WeekViewStatistics/replaceOrCreate:
    post:
      tags:
        - WeekViewStatistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: WeekViewStatistic.replaceOrCreate__post_WeekViewStatistics_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
  /WeekViewStatistics/upsertWithWhere:
    post:
      tags:
        - WeekViewStatistic
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: WeekViewStatistic.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
  '/WeekViewStatistics/{id}/exists':
    get:
      tags:
        - WeekViewStatistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'WeekViewStatistic.exists__get_WeekViewStatistics_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/WeekViewStatistics/{id}':
    head:
      tags:
        - WeekViewStatistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'WeekViewStatistic.exists__head_WeekViewStatistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - WeekViewStatistic
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: WeekViewStatistic.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
    put:
      tags:
        - WeekViewStatistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'WeekViewStatistic.replaceById__put_WeekViewStatistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
    delete:
      tags:
        - WeekViewStatistic
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: WeekViewStatistic.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - WeekViewStatistic
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: WeekViewStatistic.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/WeekViewStatistic'
        - name: id
          in: path
          description: WeekViewStatistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
  '/WeekViewStatistics/{id}/replace':
    post:
      tags:
        - WeekViewStatistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'WeekViewStatistic.replaceById__post_WeekViewStatistics_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
  /WeekViewStatistics/findOne:
    get:
      tags:
        - WeekViewStatistic
      summary: Find first instance of the model matched by filter from the data source.
      operationId: WeekViewStatistic.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/WeekViewStatistic'
      deprecated: false
  /WeekViewStatistics/update:
    post:
      tags:
        - WeekViewStatistic
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: WeekViewStatistic.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/WeekViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /WeekViewStatistics/count:
    get:
      tags:
        - WeekViewStatistic
      summary: Count instances of the model matched by where from the data source.
      operationId: WeekViewStatistic.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FilterViewStatistics:
    post:
      tags:
        - FilterViewStatistic
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FilterViewStatistic.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
    patch:
      tags:
        - FilterViewStatistic
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: FilterViewStatistic.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
    put:
      tags:
        - FilterViewStatistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FilterViewStatistic.replaceOrCreate__put_FilterViewStatistics
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
    get:
      tags:
        - FilterViewStatistic
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FilterViewStatistic.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
  /FilterViewStatistics/replaceOrCreate:
    post:
      tags:
        - FilterViewStatistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: FilterViewStatistic.replaceOrCreate__post_FilterViewStatistics_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
  /FilterViewStatistics/upsertWithWhere:
    post:
      tags:
        - FilterViewStatistic
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: FilterViewStatistic.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
  '/FilterViewStatistics/{id}/exists':
    get:
      tags:
        - FilterViewStatistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'FilterViewStatistic.exists__get_FilterViewStatistics_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FilterViewStatistics/{id}':
    head:
      tags:
        - FilterViewStatistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'FilterViewStatistic.exists__head_FilterViewStatistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FilterViewStatistic
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FilterViewStatistic.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
    put:
      tags:
        - FilterViewStatistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FilterViewStatistic.replaceById__put_FilterViewStatistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
    delete:
      tags:
        - FilterViewStatistic
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FilterViewStatistic.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FilterViewStatistic
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: FilterViewStatistic.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FilterViewStatistic'
        - name: id
          in: path
          description: FilterViewStatistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
  '/FilterViewStatistics/{id}/replace':
    post:
      tags:
        - FilterViewStatistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'FilterViewStatistic.replaceById__post_FilterViewStatistics_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
  /FilterViewStatistics/findOne:
    get:
      tags:
        - FilterViewStatistic
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FilterViewStatistic.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FilterViewStatistic'
      deprecated: false
  /FilterViewStatistics/update:
    post:
      tags:
        - FilterViewStatistic
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FilterViewStatistic.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FilterViewStatistic'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FilterViewStatistics/count:
    get:
      tags:
        - FilterViewStatistic
      summary: Count instances of the model matched by where from the data source.
      operationId: FilterViewStatistic.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/EngageViews/{id}/members':
    get:
      tags:
        - EngageView
      summary: Fetches belongsTo relation members.
      operationId: EngageView.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: EngageView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /EngageViews:
    post:
      tags:
        - EngageView
      summary: Create a new instance of the model and persist it into the data source.
      operationId: EngageView.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
    patch:
      tags:
        - EngageView
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: EngageView.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
    put:
      tags:
        - EngageView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: EngageView.replaceOrCreate__put_EngageViews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
    get:
      tags:
        - EngageView
      summary: Find all instances of the model matched by filter from the data source.
      operationId: EngageView.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EngageView'
      deprecated: false
  /EngageViews/replaceOrCreate:
    post:
      tags:
        - EngageView
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: EngageView.replaceOrCreate__post_EngageViews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
  /EngageViews/upsertWithWhere:
    post:
      tags:
        - EngageView
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: EngageView.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
  '/EngageViews/{id}/exists':
    get:
      tags:
        - EngageView
      summary: Check whether a model instance exists in the data source.
      operationId: 'EngageView.exists__get_EngageViews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/EngageViews/{id}':
    head:
      tags:
        - EngageView
      summary: Check whether a model instance exists in the data source.
      operationId: 'EngageView.exists__head_EngageViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - EngageView
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: EngageView.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
    put:
      tags:
        - EngageView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'EngageView.replaceById__put_EngageViews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
    delete:
      tags:
        - EngageView
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: EngageView.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - EngageView
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: EngageView.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EngageView'
        - name: id
          in: path
          description: EngageView id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
  '/EngageViews/{id}/replace':
    post:
      tags:
        - EngageView
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'EngageView.replaceById__post_EngageViews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
  /EngageViews/findOne:
    get:
      tags:
        - EngageView
      summary: Find first instance of the model matched by filter from the data source.
      operationId: EngageView.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EngageView'
      deprecated: false
  /EngageViews/update:
    post:
      tags:
        - EngageView
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: EngageView.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EngageView'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /EngageViews/count:
    get:
      tags:
        - EngageView
      summary: Count instances of the model matched by where from the data source.
      operationId: EngageView.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /EngageViews/getUser:
    get:
      tags:
        - EngageView
      operationId: EngageView.getUser
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /EngageViews/getRegisteredUser:
    get:
      tags:
        - EngageView
      operationId: EngageView.getRegisteredUser
      parameters:
        - name: userId
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /EngageViews/getUnrespondedChat:
    get:
      tags:
        - EngageView
      operationId: EngageView.getUnrespondedChat
      parameters:
        - name: userId
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /EngageViews/getUnrespondedLike:
    get:
      tags:
        - EngageView
      operationId: EngageView.getUnrespondedLike
      parameters:
        - name: userId
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /EngageViews/getUnrespondedMatch:
    get:
      tags:
        - EngageView
      operationId: EngageView.getUnrespondedMatch
      parameters:
        - name: userId
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Verify14Views/{id}/members':
    get:
      tags:
        - Verify14View
      summary: Fetches belongsTo relation members.
      operationId: Verify14View.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Verify14View id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  /Verify14Views:
    post:
      tags:
        - Verify14View
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Verify14View.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
    patch:
      tags:
        - Verify14View
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Verify14View.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
    put:
      tags:
        - Verify14View
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Verify14View.replaceOrCreate__put_Verify14Views
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
    get:
      tags:
        - Verify14View
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Verify14View.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Verify14View'
      deprecated: false
  /Verify14Views/replaceOrCreate:
    post:
      tags:
        - Verify14View
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Verify14View.replaceOrCreate__post_Verify14Views_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
  /Verify14Views/upsertWithWhere:
    post:
      tags:
        - Verify14View
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Verify14View.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
  '/Verify14Views/{id}/exists':
    get:
      tags:
        - Verify14View
      summary: Check whether a model instance exists in the data source.
      operationId: 'Verify14View.exists__get_Verify14Views_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Verify14Views/{id}':
    head:
      tags:
        - Verify14View
      summary: Check whether a model instance exists in the data source.
      operationId: 'Verify14View.exists__head_Verify14Views_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Verify14View
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Verify14View.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
    put:
      tags:
        - Verify14View
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Verify14View.replaceById__put_Verify14Views_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
    delete:
      tags:
        - Verify14View
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Verify14View.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Verify14View
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Verify14View.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Verify14View'
        - name: id
          in: path
          description: Verify14View id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
  '/Verify14Views/{id}/replace':
    post:
      tags:
        - Verify14View
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Verify14View.replaceById__post_Verify14Views_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
  /Verify14Views/findOne:
    get:
      tags:
        - Verify14View
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Verify14View.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Verify14View'
      deprecated: false
  /Verify14Views/update:
    post:
      tags:
        - Verify14View
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Verify14View.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Verify14View'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Verify14Views/count:
    get:
      tags:
        - Verify14View
      summary: Count instances of the model matched by where from the data source.
      operationId: Verify14View.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Verify14Views/getUser:
    get:
      tags:
        - Verify14View
      operationId: Verify14View.getUser
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Statistics/{id}/accessTokens/{fk}':
    get:
      tags:
        - Statistic
      summary: Find a related item by id for accessTokens.
      operationId: Statistic.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Delete a related item by id for accessTokens.
      operationId: Statistic.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update a related item by id for accessTokens.
      operationId: Statistic.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Statistics/{id}/memberImage/{fk}':
    get:
      tags:
        - Statistic
      summary: Find a related item by id for memberImage.
      operationId: Statistic.prototype.__findById__memberImage
      parameters:
        - name: fk
          in: path
          description: Foreign key for memberImage
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Delete a related item by id for memberImage.
      operationId: Statistic.prototype.__destroyById__memberImage
      parameters:
        - name: fk
          in: path
          description: Foreign key for memberImage
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update a related item by id for memberImage.
      operationId: Statistic.prototype.__updateById__memberImage
      parameters:
        - name: fk
          in: path
          description: Foreign key for memberImage
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberImage'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
  '/Statistics/{id}/nearbies':
    get:
      tags:
        - Statistic
      summary: Fetches hasOne relation nearbies.
      operationId: Statistic.prototype.__get__nearbies
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in nearbies of this model.
      operationId: Statistic.prototype.__create__nearbies
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Nearby'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update nearbies of this model.
      operationId: Statistic.prototype.__update__nearbies
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Nearby'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Nearby'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes nearbies of this model.
      operationId: Statistic.prototype.__destroy__nearbies
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/settingHome':
    get:
      tags:
        - Statistic
      summary: Fetches hasOne relation settingHome.
      operationId: Statistic.prototype.__get__settingHome
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in settingHome of this model.
      operationId: Statistic.prototype.__create__settingHome
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update settingHome of this model.
      operationId: Statistic.prototype.__update__settingHome
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes settingHome of this model.
      operationId: Statistic.prototype.__destroy__settingHome
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/memberPhotos':
    get:
      tags:
        - Statistic
      summary: Fetches hasOne relation memberPhotos.
      operationId: Statistic.prototype.__get__memberPhotos
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in memberPhotos of this model.
      operationId: Statistic.prototype.__create__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update memberPhotos of this model.
      operationId: Statistic.prototype.__update__memberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes memberPhotos of this model.
      operationId: Statistic.prototype.__destroy__memberPhotos
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/chatDetails/{fk}':
    get:
      tags:
        - Statistic
      summary: Find a related item by id for chatDetails.
      operationId: Statistic.prototype.__findById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Delete a related item by id for chatDetails.
      operationId: Statistic.prototype.__destroyById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update a related item by id for chatDetails.
      operationId: Statistic.prototype.__updateById__chatDetails
      parameters:
        - name: fk
          in: path
          description: Foreign key for chatDetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
  '/Statistics/{id}/rel_visibility/{fk}':
    get:
      tags:
        - Statistic
      summary: Find a related item by id for rel_visibility.
      operationId: Statistic.prototype.__findById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Delete a related item by id for rel_visibility.
      operationId: Statistic.prototype.__destroyById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update a related item by id for rel_visibility.
      operationId: Statistic.prototype.__updateById__rel_visibility
      parameters:
        - name: fk
          in: path
          description: Foreign key for rel_visibility
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
  '/Statistics/{id}/settingHomes':
    get:
      tags:
        - Statistic
      summary: Fetches hasOne relation settingHomes.
      operationId: Statistic.prototype.__get__settingHomes
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in settingHomes of this model.
      operationId: Statistic.prototype.__create__settingHomes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Update settingHomes of this model.
      operationId: Statistic.prototype.__update__settingHomes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SettingHome'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SettingHome'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes settingHomes of this model.
      operationId: Statistic.prototype.__destroy__settingHomes
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/accessTokens':
    get:
      tags:
        - Statistic
      summary: Queries accessTokens of Statistic.
      operationId: Statistic.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in accessTokens of this model.
      operationId: Statistic.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes all accessTokens of this model.
      operationId: Statistic.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/accessTokens/count':
    get:
      tags:
        - Statistic
      summary: Counts accessTokens of Statistic.
      operationId: Statistic.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Statistics/{id}/memberImage':
    get:
      tags:
        - Statistic
      summary: Queries memberImage of Statistic.
      operationId: Statistic.prototype.__get__memberImage
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MemberImage'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in memberImage of this model.
      operationId: Statistic.prototype.__create__memberImage
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberImage'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberImage'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes all memberImage of this model.
      operationId: Statistic.prototype.__delete__memberImage
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/memberImage/count':
    get:
      tags:
        - Statistic
      summary: Counts memberImage of Statistic.
      operationId: Statistic.prototype.__count__memberImage
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Statistics/{id}/chatDetails':
    get:
      tags:
        - Statistic
      summary: Queries chatDetails of Statistic.
      operationId: Statistic.prototype.__get__chatDetails
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatDetail'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in chatDetails of this model.
      operationId: Statistic.prototype.__create__chatDetails
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ChatDetail'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ChatDetail'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes all chatDetails of this model.
      operationId: Statistic.prototype.__delete__chatDetails
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/chatDetails/count':
    get:
      tags:
        - Statistic
      summary: Counts chatDetails of Statistic.
      operationId: Statistic.prototype.__count__chatDetails
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Statistics/{id}/rel_visibility':
    get:
      tags:
        - Statistic
      summary: Queries rel_visibility of Statistic.
      operationId: Statistic.prototype.__get__rel_visibility
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VisibilityData'
      deprecated: false
    post:
      tags:
        - Statistic
      summary: Creates a new instance in rel_visibility of this model.
      operationId: Statistic.prototype.__create__rel_visibility
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/VisibilityData'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VisibilityData'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: Deletes all rel_visibility of this model.
      operationId: Statistic.prototype.__delete__rel_visibility
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/rel_visibility/count':
    get:
      tags:
        - Statistic
      summary: Counts rel_visibility of Statistic.
      operationId: Statistic.prototype.__count__rel_visibility
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Statistics:
    post:
      tags:
        - Statistic
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Statistic.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
    patch:
      tags:
        - Statistic
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Statistic.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Statistic.replaceOrCreate__put_Statistics
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
    get:
      tags:
        - Statistic
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Statistic.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Statistic'
      deprecated: false
  /Statistics/replaceOrCreate:
    post:
      tags:
        - Statistic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Statistic.replaceOrCreate__post_Statistics_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
  /Statistics/upsertWithWhere:
    post:
      tags:
        - Statistic
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Statistic.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
  '/Statistics/{id}/exists':
    get:
      tags:
        - Statistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'Statistic.exists__get_Statistics_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Statistics/{id}':
    head:
      tags:
        - Statistic
      summary: Check whether a model instance exists in the data source.
      operationId: 'Statistic.exists__head_Statistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Statistic
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Statistic.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
    put:
      tags:
        - Statistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Statistic.replaceById__put_Statistics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
    delete:
      tags:
        - Statistic
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Statistic.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Statistic
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Statistic.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Statistic'
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
  '/Statistics/{id}/replace':
    post:
      tags:
        - Statistic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Statistic.replaceById__post_Statistics_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
  /Statistics/findOne:
    get:
      tags:
        - Statistic
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Statistic.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Statistic'
      deprecated: false
  /Statistics/update:
    post:
      tags:
        - Statistic
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Statistic.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Statistic'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Statistics/count:
    get:
      tags:
        - Statistic
      summary: Count instances of the model matched by where from the data source.
      operationId: Statistic.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Statistics/login:
    post:
      tags:
        - Statistic
      summary: Login a user with username/email and password.
      operationId: Statistic.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Statistics/logout:
    post:
      tags:
        - Statistic
      summary: Logout a user with access token.
      operationId: Statistic.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Statistics/{id}/verify':
    post:
      tags:
        - Statistic
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: Statistic.prototype.verify
      parameters:
        - name: id
          in: path
          description: Statistic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Statistics/confirm:
    get:
      tags:
        - Statistic
      summary: Confirm a user registration with identity verification token.
      operationId: Statistic.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Statistics/reset:
    post:
      tags:
        - Statistic
      summary: Reset password for a user with email.
      operationId: Statistic.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Statistics/change-password:
    post:
      tags:
        - Statistic
      summary: "Change a user's password."
      operationId: Statistic.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Statistics/reset-password:
    post:
      tags:
        - Statistic
      summary: "Reset user's password via a password-reset token."
      operationId: Statistic.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Statistics/getNewRegisterNumber:
    get:
      tags:
        - Statistic
      operationId: Statistic.getNewRegisterNumber
      parameters:
        - name: startDate
          in: query
          required: true
          type: string
          format: date-time
        - name: endDate
          in: query
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Statistics/getLikeListNumber:
    get:
      tags:
        - Statistic
      operationId: Statistic.getLikeListNumber
      parameters:
        - name: startDate
          in: query
          required: true
          type: string
          format: date-time
        - name: endDate
          in: query
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Statistics/getMatchNumber:
    get:
      tags:
        - Statistic
      operationId: Statistic.getMatchNumber
      parameters:
        - name: startDate
          in: query
          required: true
          type: string
          format: date-time
        - name: endDate
          in: query
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Statistics/getGenderNumber:
    get:
      tags:
        - Statistic
      operationId: Statistic.getGenderNumber
      parameters:
        - name: startDate
          in: query
          required: true
          type: string
          format: date-time
        - name: endDate
          in: query
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/AdminVerifies/{id}/members':
    get:
      tags:
        - AdminVerify
      summary: Fetches belongsTo relation members.
      operationId: AdminVerify.prototype.__get__members
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
  '/AdminVerifies/{id}/verifyMemberPhotos':
    get:
      tags:
        - AdminVerify
      summary: Fetches hasOne relation verifyMemberPhotos.
      operationId: AdminVerify.prototype.__get__verifyMemberPhotos
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    post:
      tags:
        - AdminVerify
      summary: Creates a new instance in verifyMemberPhotos of this model.
      operationId: AdminVerify.prototype.__create__verifyMemberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    put:
      tags:
        - AdminVerify
      summary: Update verifyMemberPhotos of this model.
      operationId: AdminVerify.prototype.__update__verifyMemberPhotos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MemberPhoto'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MemberPhoto'
      deprecated: false
    delete:
      tags:
        - AdminVerify
      summary: Deletes verifyMemberPhotos of this model.
      operationId: AdminVerify.prototype.__destroy__verifyMemberPhotos
      parameters:
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AdminVerifies/{id}/verifyMember':
    get:
      tags:
        - AdminVerify
      summary: Fetches hasOne relation verifyMember.
      operationId: AdminVerify.prototype.__get__verifyMember
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    post:
      tags:
        - AdminVerify
      summary: Creates a new instance in verifyMember of this model.
      operationId: AdminVerify.prototype.__create__verifyMember
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - AdminVerify
      summary: Update verifyMember of this model.
      operationId: AdminVerify.prototype.__update__verifyMember
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - AdminVerify
      summary: Deletes verifyMember of this model.
      operationId: AdminVerify.prototype.__destroy__verifyMember
      parameters:
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AdminVerifies/{id}/verifyBy':
    get:
      tags:
        - AdminVerify
      summary: Fetches hasOne relation verifyBy.
      operationId: AdminVerify.prototype.__get__verifyBy
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    post:
      tags:
        - AdminVerify
      summary: Creates a new instance in verifyBy of this model.
      operationId: AdminVerify.prototype.__create__verifyBy
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    put:
      tags:
        - AdminVerify
      summary: Update verifyBy of this model.
      operationId: AdminVerify.prototype.__update__verifyBy
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Members'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Members'
      deprecated: false
    delete:
      tags:
        - AdminVerify
      summary: Deletes verifyBy of this model.
      operationId: AdminVerify.prototype.__destroy__verifyBy
      parameters:
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /AdminVerifies:
    post:
      tags:
        - AdminVerify
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AdminVerify.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
    patch:
      tags:
        - AdminVerify
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: AdminVerify.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
    put:
      tags:
        - AdminVerify
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminVerify.replaceOrCreate__put_AdminVerifies
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
    get:
      tags:
        - AdminVerify
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AdminVerify.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AdminVerify'
      deprecated: false
  /AdminVerifies/replaceOrCreate:
    post:
      tags:
        - AdminVerify
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: AdminVerify.replaceOrCreate__post_AdminVerifies_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
  /AdminVerifies/upsertWithWhere:
    post:
      tags:
        - AdminVerify
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: AdminVerify.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
  '/AdminVerifies/{id}/exists':
    get:
      tags:
        - AdminVerify
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminVerify.exists__get_AdminVerifies_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AdminVerifies/{id}':
    head:
      tags:
        - AdminVerify
      summary: Check whether a model instance exists in the data source.
      operationId: 'AdminVerify.exists__head_AdminVerifies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AdminVerify
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AdminVerify.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
    put:
      tags:
        - AdminVerify
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminVerify.replaceById__put_AdminVerifies_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
    delete:
      tags:
        - AdminVerify
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AdminVerify.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AdminVerify
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: AdminVerify.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminVerify'
        - name: id
          in: path
          description: AdminVerify id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
  '/AdminVerifies/{id}/replace':
    post:
      tags:
        - AdminVerify
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'AdminVerify.replaceById__post_AdminVerifies_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
  /AdminVerifies/findOne:
    get:
      tags:
        - AdminVerify
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AdminVerify.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AdminVerify'
      deprecated: false
  /AdminVerifies/update:
    post:
      tags:
        - AdminVerify
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AdminVerify.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AdminVerify'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AdminVerifies/count:
    get:
      tags:
        - AdminVerify
      summary: Count instances of the model matched by where from the data source.
      operationId: AdminVerify.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AdminVerifies/getList:
    get:
      tags:
        - AdminVerify
      operationId: AdminVerify.getList
      parameters:
        - name: flag
          in: query
          required: true
          type: number
          format: double
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /AdminVerifies/getListStatus:
    get:
      tags:
        - AdminVerify
      operationId: AdminVerify.getListStatus
      parameters:
        - name: flag
          in: query
          required: true
          type: number
          format: double
        - name: limit
          in: query
          required: true
          type: number
          format: double
        - name: offset
          in: query
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /LogAdmins:
    post:
      tags:
        - LogAdmin
      summary: Create a new instance of the model and persist it into the data source.
      operationId: LogAdmin.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
    patch:
      tags:
        - LogAdmin
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LogAdmin.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
    put:
      tags:
        - LogAdmin
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LogAdmin.replaceOrCreate__put_LogAdmins
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
    get:
      tags:
        - LogAdmin
      summary: Find all instances of the model matched by filter from the data source.
      operationId: LogAdmin.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/LogAdmin'
      deprecated: false
  /LogAdmins/replaceOrCreate:
    post:
      tags:
        - LogAdmin
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LogAdmin.replaceOrCreate__post_LogAdmins_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
  /LogAdmins/upsertWithWhere:
    post:
      tags:
        - LogAdmin
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: LogAdmin.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
  '/LogAdmins/{id}/exists':
    get:
      tags:
        - LogAdmin
      summary: Check whether a model instance exists in the data source.
      operationId: 'LogAdmin.exists__get_LogAdmins_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/LogAdmins/{id}':
    head:
      tags:
        - LogAdmin
      summary: Check whether a model instance exists in the data source.
      operationId: 'LogAdmin.exists__head_LogAdmins_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - LogAdmin
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: LogAdmin.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
    put:
      tags:
        - LogAdmin
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'LogAdmin.replaceById__put_LogAdmins_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
    delete:
      tags:
        - LogAdmin
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: LogAdmin.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - LogAdmin
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: LogAdmin.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LogAdmin'
        - name: id
          in: path
          description: LogAdmin id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
  '/LogAdmins/{id}/replace':
    post:
      tags:
        - LogAdmin
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'LogAdmin.replaceById__post_LogAdmins_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
  /LogAdmins/findOne:
    get:
      tags:
        - LogAdmin
      summary: Find first instance of the model matched by filter from the data source.
      operationId: LogAdmin.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LogAdmin'
      deprecated: false
  /LogAdmins/update:
    post:
      tags:
        - LogAdmin
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: LogAdmin.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LogAdmin'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /LogAdmins/count:
    get:
      tags:
        - LogAdmin
      summary: Count instances of the model matched by where from the data source.
      operationId: LogAdmin.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  MemberImage:
    properties:
      id:
        maxLength: 11
        type: number
        format: double
      src:
        maxLength: 255
        type: string
      membersId:
        type: number
        format: double
    required:
      - id
      - membersId
    additionalProperties: false
  Nearby:
    properties:
      geolocation:
        $ref: '#/definitions/GeoPoint'
      membersId:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - geolocation
      - membersId
      - id
    additionalProperties: false
  MemberPhoto:
    properties:
      src:
        maxLength: 255
        type: string
      membersId:
        type: number
        format: double
      id:
        type: number
        format: double
      ktp:
        maxLength: 255
        type: string
      ktp2:
        maxLength: 255
        type: string
      sim:
        maxLength: 255
        type: string
      schoolCertificate:
        maxLength: 255
        type: string
      passport:
        maxLength: 255
        type: string
      businessCard:
        maxLength: 255
        type: string
      srcTmp:
        maxLength: 255
        type: string
    required:
      - membersId
      - id
    additionalProperties: false
  SettingHome:
    properties:
      deleteDatetime:
        type: string
        format: date-time
      createDatetime:
        type: string
        format: date-time
      createUserId:
        type: number
        format: double
      memberId:
        type: number
        format: double
      religion:
        maxLength: 255
        type: string
      settingHomeId:
        type: number
        format: double
      ageLower:
        type: number
        format: double
      ageUpper:
        type: number
        format: double
      updateDatetime:
        type: string
        format: date-time
      updateUserId:
        type: number
        format: double
      zodiac:
        maxLength: 255
        type: string
      visibility:
        type: boolean
      distance:
        type: number
        format: double
      smoke:
        type: number
        format: double
      income:
        type: number
        format: double
      verify:
        type: number
        format: double
    required:
      - memberId
      - settingHomeId
    additionalProperties: false
  VisibilityData:
    properties:
      verified:
        type: number
        format: double
      unverified:
        type: number
        format: double
      filterId:
        type: number
        format: double
      match:
        type: number
        format: double
      id:
        type: number
        format: double
      membersId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  ChatDetail:
    properties:
      createdDate:
        type: string
        format: date-time
      id:
        type: number
        format: double
      text:
        maxLength: 65535
        type: string
      matchId:
        type: number
        format: double
      membersId:
        type: number
        format: double
      type:
        maxLength: 45
        type: string
      read:
        type: number
        format: double
    required:
      - id
      - type
    additionalProperties: false
  Members:
    properties:
      realm:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      emailVerified:
        type: number
        format: double
      emailSent:
        type: number
        format: double
      loginWith:
        maxLength: 100
        type: string
      socialId:
        maxLength: 100
        type: string
      phone:
        maxLength: 13
        type: string
      bday:
        type: string
        format: date-time
      address:
        maxLength: 65535
        type: string
      gender:
        type: number
        format: double
      religion:
        maxLength: 20
        type: string
      photoKtp:
        maxLength: 255
        type: string
      employeeType:
        maxLength: 255
        type: string
      industry:
        maxLength: 100
        type: string
      profession:
        maxLength: 255
        type: string
      hobby:
        maxLength: 65535
        type: string
      about:
        maxLength: 255
        type: string
      income:
        type: number
        format: double
      living:
        type: number
        format: double
      smoke:
        type: number
        format: double
      smokeDetail:
        maxLength: 45
        type: string
      drink:
        maxLength: 45
        type: string
      race:
        maxLength: 65535
        type: string
      maritalStatus:
        type: number
        format: double
      kids:
        maxLength: 11
        type: string
      idCard:
        maxLength: 45
        type: string
      degree:
        maxLength: 255
        type: string
      nameCard:
        maxLength: 255
        type: string
      facebookId:
        maxLength: 255
        type: string
      registered:
        type: number
        format: double
      id:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      flagMember:
        maxLength: 2
        type: string
      documentPicture:
        maxLength: 255
        type: string
      status:
        maxLength: 1
        type: number
        format: double
      online:
        maxLength: 1
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      zodiac:
        maxLength: 50
        type: string
      alias:
        maxLength: 255
        type: string
      lastOnline:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - fullName
      - email
      - id
    additionalProperties: false
  DislikeList:
    properties:
      id:
        type: number
        format: double
      dislikeMamber:
        maxLength: 11
        type: number
        format: double
      dislikeUser:
        maxLength: 11
        type: number
        format: double
      dislike_mamber:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  LikeList:
    properties:
      id:
        type: number
        format: double
      likeUser:
        maxLength: 11
        type: number
        format: double
      likeMember:
        maxLength: 11
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: number
        format: double
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  MemberSetting:
    properties:
      ageLower:
        type: number
        format: double
      ageUpper:
        type: number
        format: double
      distance:
        type: number
        format: double
      id:
        type: number
        format: double
      membersId:
        type: number
        format: double
      men:
        type: boolean
      women:
        type: boolean
      visibility:
        type: boolean
      religion:
        maxLength: 65535
        type: string
      zodiac:
        maxLength: 65535
        type: string
    required:
      - id
      - membersId
    additionalProperties: false
  Chat:
    properties:
      mamberId:
        maxLength: 45
        type: string
      userId:
        maxLength: 45
        type: string
      createdDate:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  NearbyView:
    properties:
      age:
        type: number
        format: double
      gender:
        type: number
        format: double
      distance:
        type: number
        format: double
      ageLower:
        type: number
        format: double
      ageUpper:
        type: number
        format: double
      bday:
        type: string
        format: date-time
      email:
        maxLength: 255
        type: string
      geolocation:
        $ref: '#/definitions/GeoPoint'
      id:
        type: number
        format: double
      settingHomeId:
        type: number
        format: double
      nearbyId:
        type: number
        format: double
      photo:
        maxLength: 255
        type: string
      fullName:
        maxLength: 255
        type: string
      online:
        maxLength: 1
        type: number
        format: double
      visibility:
        type: boolean
      religion:
        maxLength: 20
        type: string
      zodiac:
        maxLength: 50
        type: string
      employeeType:
        maxLength: 255
        type: string
      address:
        maxLength: 65535
        type: string
      smoke:
        type: number
        format: double
      income:
        type: number
        format: double
      verify:
        type: number
        format: double
    required:
      - fullName
    additionalProperties: false
  ViewChat:
    properties:
      fullName:
        maxLength: 255
        type: string
      id:
        type: number
        format: double
    required:
      - fullName
      - id
    additionalProperties: false
  MatchMember:
    properties:
      matchId:
        type: number
        format: double
      membersId:
        type: number
        format: double
      updateDate:
        type: string
        format: date-time
      updateBy:
        type: number
        format: double
      isRead:
        type: number
        format: double
      id:
        type: number
        format: double
      matchFromHome:
        default: false
        type: boolean
    required:
      - matchId
      - membersId
      - id
      - matchFromHome
    additionalProperties: false
  Matches:
    properties:
      createdAt:
        type: string
        format: date-time
      id:
        type: number
        format: double
      title:
        maxLength: 255
        type: string
      createdBy:
        type: number
        format: double
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  ViewMatch:
    properties:
      createdDate:
        type: string
        format: date-time
      fullName:
        maxLength: 255
        type: string
      id:
        type: number
        format: double
      matchId:
        type: number
        format: double
      membersId:
        type: number
        format: double
      src:
        maxLength: 255
        type: string
    required:
      - id
    additionalProperties: false
  ReportMembers:
    properties:
      reportId:
        maxLength: 10
        type: string
      reportedId:
        maxLength: 10
        type: string
      reason:
        maxLength: 255
        type: string
      createdDate:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  ApprovalView:
    properties:
      matchCount:
        type: number
        format: double
      chatCount:
        type: number
        format: double
      id:
        type: number
        format: double
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      src:
        maxLength: 255
        type: string
      status:
        maxLength: 1
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
    additionalProperties: false
  MappingMobileCode:
    properties:
      mobileNumber:
        maxLength: 15
        type: string
      generatedCode:
        maxLength: 6
        type: string
      expiredDatetime:
        type: string
        format: date-time
      createDatetime:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - mobileNumber
      - generatedCode
      - createDatetime
      - id
    additionalProperties: false
  StatusVerifyRate:
    properties:
      verifyKey:
        maxLength: 20
        type: string
      verifyRate:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - verifyKey
      - verifyRate
      - id
    additionalProperties: false
  StatusVerifyUser:
    properties:
      userId:
        type: number
        format: double
      verifyKey:
        maxLength: 20
        type: string
      verifyValue:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - userId
      - verifyKey
      - verifyValue
      - id
    additionalProperties: false
  PhotoKtp:
    properties:
      userId:
        type: number
        format: double
      filename:
        maxLength: 100
        type: string
      createDatetime:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - userId
      - filename
      - createDatetime
      - id
    additionalProperties: false
  MemberVerifyStatus:
    properties:
      userId:
        type: string
      phone:
        type: number
        format: double
      ktp:
        type: number
        format: double
      sim:
        type: number
        format: double
      schoolCertificate:
        type: number
        format: double
      passport:
        type: number
        format: double
      businessCard:
        type: number
        format: double
      id:
        type: number
        format: double
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
    required:
      - userId
      - id
      - createAt
      - updateAt
    additionalProperties: false
  VerificationView:
    properties:
      userId:
        type: number
        format: double
      phoneStatus:
        type: number
        format: double
      ktpStatus:
        type: number
        format: double
      simStatus:
        type: number
        format: double
      schoolStatus:
        type: number
        format: double
      passportStatus:
        type: number
        format: double
      businessStatus:
        type: number
        format: double
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      phone:
        maxLength: 13
        type: string
      profileSrc:
        maxLength: 255
        type: string
      ktpSrc:
        maxLength: 255
        type: string
      simSrc:
        maxLength: 255
        type: string
      schoolSrc:
        maxLength: 255
        type: string
      bday:
        type: string
        format: date-time
      passportSrc:
        maxLength: 255
        type: string
      religion:
        maxLength: 20
        type: string
      businessSrc:
        maxLength: 255
        type: string
      id:
        type: number
        format: double
    required:
      - userId
      - createAt
      - updateAt
      - fullName
      - email
    additionalProperties: false
  ApprovalContentView:
    properties:
      id:
        type: number
        format: double
      userId:
        type: number
        format: double
      type:
        maxLength: 12
        type: string
      createAt:
        type: string
        format: date-time
    required:
      - id
      - userId
      - type
    additionalProperties: false
  ApprovalMessage:
    properties:
      fromId:
        type: number
        format: double
      toId:
        type: number
        format: double
      tag:
        maxLength: 100
        type: string
      message:
        maxLength: 255
        type: string
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - fromId
      - toId
      - id
    additionalProperties: false
  Hobby:
    properties:
      name:
        maxLength: 45
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  MappingMemberToken:
    properties:
      playerId:
        maxLength: 255
        type: string
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  LikeView:
    properties:
      realm:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      emailVerified:
        type: number
        format: double
      password:
        maxLength: 255
        type: string
      loginWith:
        maxLength: 100
        type: string
      socialId:
        maxLength: 100
        type: string
      verificationToken:
        maxLength: 255
        type: string
      phone:
        maxLength: 13
        type: string
      bday:
        type: string
        format: date-time
      address:
        maxLength: 65535
        type: string
      gender:
        type: number
        format: double
      religion:
        maxLength: 20
        type: string
      photoKtp:
        maxLength: 255
        type: string
      employeeType:
        maxLength: 255
        type: string
      profession:
        maxLength: 255
        type: string
      hobby:
        maxLength: 255
        type: string
      about:
        maxLength: 255
        type: string
      income:
        maxLength: 20
        type: string
      living:
        type: number
        format: double
      smoke:
        type: number
        format: double
      race:
        maxLength: 65535
        type: string
      maritalStatus:
        type: number
        format: double
      kids:
        type: number
        format: double
      idCard:
        maxLength: 45
        type: string
      documentPicture:
        maxLength: 255
        type: string
      degree:
        maxLength: 255
        type: string
      nameCard:
        maxLength: 255
        type: string
      facebookId:
        maxLength: 255
        type: string
      registered:
        type: number
        format: double
      online:
        type: number
        format: double
      flagMember:
        maxLength: 2
        type: string
      status:
        type: number
        format: double
      zodiac:
        maxLength: 50
        type: string
      deletedAt:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time
      likeUser:
        maxLength: 45
        type: string
      src:
        maxLength: 255
        type: string
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  ViewLikeMe:
    properties:
      realm:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      emailVerified:
        type: number
        format: double
      password:
        maxLength: 255
        type: string
      loginWith:
        maxLength: 100
        type: string
      socialId:
        maxLength: 100
        type: string
      verificationToken:
        maxLength: 255
        type: string
      phone:
        maxLength: 13
        type: string
      bday:
        type: string
        format: date-time
      address:
        maxLength: 65535
        type: string
      gender:
        type: number
        format: double
      religion:
        maxLength: 20
        type: string
      photoKtp:
        maxLength: 255
        type: string
      employeeType:
        maxLength: 255
        type: string
      profession:
        maxLength: 255
        type: string
      hobby:
        maxLength: 255
        type: string
      about:
        maxLength: 255
        type: string
      income:
        maxLength: 20
        type: string
      living:
        type: number
        format: double
      smoke:
        type: number
        format: double
      race:
        maxLength: 65535
        type: string
      maritalStatus:
        type: number
        format: double
      kids:
        type: number
        format: double
      idCard:
        maxLength: 45
        type: string
      documentPicture:
        maxLength: 255
        type: string
      degree:
        maxLength: 255
        type: string
      nameCard:
        maxLength: 255
        type: string
      facebookId:
        maxLength: 255
        type: string
      registered:
        type: number
        format: double
      online:
        type: number
        format: double
      flagMember:
        maxLength: 2
        type: string
      status:
        type: number
        format: double
      zodiac:
        maxLength: 50
        type: string
      deletedAt:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time
      likeUser:
        maxLength: 45
        type: string
      src:
        maxLength: 255
        type: string
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Devicetokenmapping:
    properties:
      id:
        type: number
        format: double
      token:
        maxLength: 255
        type: string
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
    required:
      - id
      - createAt
      - updateAt
    additionalProperties: false
  ViewMember:
    properties:
      realm:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
      emailVerified:
        type: number
        format: double
      verificationToken:
        maxLength: 255
        type: string
      phone:
        maxLength: 15
        type: string
      bday:
        type: string
        format: date-time
      address:
        maxLength: 65535
        type: string
      gender:
        type: number
        format: double
      photo:
        maxLength: 255
        type: string
      employeeType:
        maxLength: 255
        type: string
      profession:
        maxLength: 255
        type: string
      hobby:
        maxLength: 65535
        type: string
      about:
        maxLength: 255
        type: string
      income:
        maxLength: 20
        type: string
      living:
        type: number
        format: double
      smoke:
        type: number
        format: double
      race:
        maxLength: 65535
        type: string
      maritalStatus:
        type: number
        format: double
      kids:
        maxLength: 11
        type: string
      idCard:
        maxLength: 45
        type: string
      documentPicture:
        maxLength: 255
        type: string
      degree:
        maxLength: 255
        type: string
      nameCard:
        maxLength: 255
        type: string
      facebookId:
        maxLength: 255
        type: string
      registered:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      flagMember:
        maxLength: 2
        type: string
      religion:
        maxLength: 20
        type: string
      zodiac:
        maxLength: 50
        type: string
      age:
        type: number
        format: double
      phoneVer:
        type: number
        format: double
      ktp:
        type: number
        format: double
      sim:
        type: number
        format: double
      schoolCertificate:
        type: number
        format: double
      passport:
        type: number
        format: double
      businessCard:
        type: number
        format: double
      id:
        type: number
        format: double
      verify:
        maxLength: 0
        type: string
      password:
        maxLength: 255
        type: string
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
    additionalProperties: false
  ViewHome:
    properties:
      id:
        type: number
        format: double
      fullName:
        maxLength: 255
        type: string
      about:
        maxLength: 255
        type: string
      age:
        type: number
        format: double
      gender:
        type: number
        format: double
      degree:
        maxLength: 255
        type: string
      employeeType:
        maxLength: 255
        type: string
      hobby:
        maxLength: 65535
        type: string
      income:
        type: number
        format: double
      smoke:
        type: number
        format: double
      living:
        type: number
        format: double
      race:
        maxLength: 65535
        type: string
      religion:
        maxLength: 20
        type: string
      src:
        maxLength: 255
        type: string
      zodiac:
        maxLength: 50
        type: string
      address:
        maxLength: 65535
        type: string
      verifyScore:
        type: number
        format: double
      phoneVer:
        type: number
        format: double
      ktp:
        type: number
        format: double
      sim:
        type: number
        format: double
      schoolCertificate:
        type: number
        format: double
      passport:
        type: number
        format: double
      businessCard:
        type: number
        format: double
      profession:
        maxLength: 255
        type: string
      geolocation:
        $ref: '#/definitions/GeoPoint'
      alias:
        maxLength: 255
        type: string
      points:
        type: number
        format: double
      lastOnline:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time
    required:
      - id
      - fullName
      - about
      - age
      - degree
      - employeeType
      - hobby
      - living
      - race
      - religion
      - src
      - zodiac
    additionalProperties: false
  ReportView:
    properties:
      reason:
        maxLength: 255
        type: string
      reportId:
        maxLength: 10
        type: string
      reportedId:
        maxLength: 10
        type: string
      id:
        type: number
        format: double
      reportName:
        maxLength: 255
        type: string
      src:
        maxLength: 255
        type: string
      reportedName:
        maxLength: 255
        type: string
    required:
      - id
    additionalProperties: false
  Visibility:
    properties:
      name:
        maxLength: 25
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - id
    additionalProperties: false
  AppInfo:
    properties:
      appName:
        maxLength: 48
        type: string
      appPlatform:
        maxLength: 7
        type: string
      appVersion:
        maxLength: 48
        type: string
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
      appInfoId:
        type: number
        format: double
    required:
      - appName
      - appPlatform
      - appVersion
      - createAt
      - updateAt
      - appInfoId
    additionalProperties: false
  ChatHide:
    properties:
      memberId:
        type: number
        format: double
      matchId:
        type: number
        format: double
      createAt:
        type: string
        format: date-time
      updateAt:
        type: string
        format: date-time
      chatHideId:
        type: number
        format: double
    required:
      - chatHideId
    additionalProperties: false
  Feedback:
    properties:
      memberId:
        type: string
      message:
        maxLength: 65535
        type: string
      appVersion:
        maxLength: 45
        type: string
      appPlatform:
        maxLength: 7
        type: string
      createdAt:
        type: string
        format: date-time
      feedbackId:
        type: number
        format: double
    required:
      - memberId
      - message
      - appVersion
      - appPlatform
      - feedbackId
    additionalProperties: false
  FeedbackChoice:
    properties:
      choiceValue:
        maxLength: 50
        type: string
      createdAt:
        type: string
        format: date-time
      deletedAt:
        type: string
        format: date-time
      feedbackChoiceId:
        type: number
        format: double
    required:
      - choiceValue
      - createdAt
      - feedbackChoiceId
    additionalProperties: false
  FeedbackQuestionTypeChoice:
    properties:
      feedbackQuestionId:
        type: number
        format: double
      feedbackTypeId:
        type: number
        format: double
      feedbackChoiceId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      deletedAt:
        type: string
        format: date-time
      feedbackQuestionTypeChoiceId:
        type: number
        format: double
    required:
      - feedbackQuestionId
      - feedbackTypeId
      - feedbackChoiceId
      - createdAt
      - feedbackQuestionTypeChoiceId
    additionalProperties: false
  FeedbackMemberAnswer:
    properties:
      memberId:
        type: number
        format: double
      feedbackQuestionTypeChoiceId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      deletedAt:
        type: string
        format: date-time
      feedbackMemberAnswerId:
        type: number
        format: double
    required:
      - memberId
      - feedbackQuestionTypeChoiceId
      - createdAt
      - feedbackMemberAnswerId
    additionalProperties: false
  FeedbackType:
    properties:
      typeName:
        maxLength: 50
        type: string
      createdAt:
        type: string
        format: date-time
      deletedAt:
        type: string
        format: date-time
      feedbackTypeId:
        type: number
        format: double
    required:
      - typeName
      - createdAt
      - feedbackTypeId
    additionalProperties: false
  FeedbackQuestion:
    properties:
      questionText:
        maxLength: 100
        type: string
      createdAt:
        type: string
        format: date-time
      deletedAt:
        type: string
        format: date-time
      feedbackQuestionId:
        type: number
        format: double
    required:
      - questionText
      - createdAt
      - feedbackQuestionId
    additionalProperties: false
  InactiveReason:
    properties:
      id:
        type: number
        format: double
      createAt:
        type: string
        format: date-time
      fromId:
        maxLength: 10
        type: string
      reason:
        maxLength: 50
        type: string
      toId:
        maxLength: 10
        type: string
    required:
      - id
    additionalProperties: false
  Block:
    properties:
      memberId:
        type: number
        format: double
      targetId:
        type: string
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: number
        format: double
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
      blockId:
        type: number
        format: double
    required:
      - memberId
      - targetId
      - createdAt
      - createdBy
      - updatedAt
      - updatedBy
      - blockId
    additionalProperties: false
  AdminChatMember:
    properties:
      adminChatRoomId:
        type: number
        format: double
      memberId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: number
        format: double
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
      adminChatMemberId:
        type: number
        format: double
    required:
      - adminChatRoomId
      - memberId
      - createdAt
      - createdBy
      - updatedAt
      - updatedBy
      - adminChatMemberId
    additionalProperties: false
  AdminChatDetail:
    properties:
      adminChatRoomId:
        type: number
        format: double
      senderId:
        type: number
        format: double
      type:
        maxLength: 20
        type: string
      message:
        maxLength: 65535
        type: string
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
      adminChatDetailId:
        type: number
        format: double
      readStatus:
        type: number
        format: double
    required:
      - adminChatRoomId
      - senderId
      - type
      - message
      - updatedAt
      - updatedBy
      - createdAt
      - createdBy
      - adminChatDetailId
    additionalProperties: false
  AdminChatRoom:
    properties:
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: number
        format: double
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
      adminChatRoomId:
        type: number
        format: double
      lastChat:
        type: string
        format: date-time
    required:
      - createdAt
      - createdBy
      - updatedAt
      - updatedBy
      - adminChatRoomId
    additionalProperties: false
  MonthViewStatistic:
    properties:
      registered:
        type: number
        format: double
      male:
        type: number
        format: double
      female:
        type: number
        format: double
      active:
        type: number
        format: double
      inactive:
        type: number
        format: double
      matches:
        type: number
        format: double
      id:
        type: number
        format: double
    additionalProperties: false
  WeekViewStatistic:
    properties:
      registered:
        type: number
        format: double
      male:
        type: number
        format: double
      female:
        type: number
        format: double
      active:
        type: number
        format: double
      inactive:
        type: number
        format: double
      matches:
        type: number
        format: double
      id:
        type: number
        format: double
    additionalProperties: false
  FilterViewStatistic:
    properties:
      registered:
        type: number
        format: double
      male:
        type: number
        format: double
      female:
        type: number
        format: double
      active:
        type: number
        format: double
      inactive:
        type: number
        format: double
      matches:
        type: number
        format: double
      id:
        type: number
        format: double
    additionalProperties: false
  EngageView:
    properties:
      lastOnline:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Verify14View:
    properties:
      createdAt:
        type: string
        format: date-time
      id:
        type: number
        format: double
    additionalProperties: false
  Statistic:
    properties:
      realm:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
      fullName:
        maxLength: 255
        type: string
      email:
        maxLength: 255
        type: string
      emailVerified:
        type: number
        format: double
      emailSent:
        type: number
        format: double
      loginWith:
        maxLength: 100
        type: string
      socialId:
        maxLength: 100
        type: string
      phone:
        maxLength: 13
        type: string
      bday:
        type: string
        format: date-time
      address:
        maxLength: 65535
        type: string
      gender:
        type: number
        format: double
      religion:
        maxLength: 20
        type: string
      photoKtp:
        maxLength: 255
        type: string
      employeeType:
        maxLength: 255
        type: string
      industry:
        maxLength: 100
        type: string
      profession:
        maxLength: 255
        type: string
      hobby:
        maxLength: 65535
        type: string
      about:
        maxLength: 255
        type: string
      income:
        type: number
        format: double
      living:
        type: number
        format: double
      smoke:
        type: number
        format: double
      smokeDetail:
        maxLength: 45
        type: string
      drink:
        maxLength: 45
        type: string
      race:
        maxLength: 65535
        type: string
      maritalStatus:
        type: number
        format: double
      kids:
        maxLength: 11
        type: string
      idCard:
        maxLength: 45
        type: string
      degree:
        maxLength: 255
        type: string
      nameCard:
        maxLength: 255
        type: string
      facebookId:
        maxLength: 255
        type: string
      registered:
        type: number
        format: double
      id:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      flagMember:
        maxLength: 2
        type: string
      documentPicture:
        maxLength: 255
        type: string
      status:
        maxLength: 1
        type: number
        format: double
      online:
        maxLength: 1
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      zodiac:
        maxLength: 50
        type: string
      alias:
        maxLength: 255
        type: string
      lastOnline:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - fullName
      - email
      - id
    additionalProperties: false
  AdminVerify:
    properties:
      memberId:
        type: number
        format: double
      verifiedBy:
        type: number
        format: double
      verifiedAt:
        type: string
        format: date-time
      verifyType:
        maxLength: 20
        type: string
      verifyStatus:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      createdBy:
        type: number
        format: double
      updatedAt:
        type: string
        format: date-time
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date-time
      deletedBy:
        type: number
        format: double
      verifyImg:
        maxLength: 255
        type: string
      adminVerifyId:
        type: number
        format: double
    required:
      - memberId
      - verifiedBy
      - verifiedAt
      - verifyType
      - verifyStatus
      - createdAt
      - createdBy
      - updatedAt
      - updatedBy
      - verifyImg
      - adminVerifyId
    additionalProperties: false
  LogAdmin:
    properties:
      page:
        type: string
      activity:
        type: string
      logDate:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - page
      - activity
      - logDate
    additionalProperties: false
  GeoPoint:
    properties:
      lat:
        type: number
      lng:
        type: number
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: pmjakarta-server
  version: 1.0.0
  title: pmjakarta-server
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
